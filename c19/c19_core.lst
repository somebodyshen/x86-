     1                                           ;代码清单，视频配套
     2                                           ;文件名：c30_core0.asm
     3                                           ;文件说明：保护模式微型核心程序 
     4                                           ;创建日期：2021-01-19
     5                                  
     6                                           ;以下常量定义部分。内核的大部分内容都应当固定 
     7                                           core_code_seg_sel     equ  0x38    ;内核代码段选择子
     8                                           core_data_seg_sel     equ  0x30    ;内核数据段选择子 
     9                                           sys_routine_seg_sel   equ  0x28    ;系统公共例程代码段的选择子 
    10                                           video_ram_seg_sel     equ  0x20    ;视频显示缓冲区的段选择子
    11                                           core_stack_seg_sel    equ  0x18    ;内核堆栈段选择子
    12                                           mem_0_4_gb_seg_sel    equ  0x08    ;整个0-4GB内存的段的选择子
    13                                           idt_linear_address    equ  0x1f000 ;中断描述符表的线性地址
    14                                           core_lin_alloc_at     equ  0x80100000
    15                                                                              ;内核中可用于分配的起始线性地址
    16                                           core_lin_tcb_addr     equ  0x8001f800
    17                                                                              ;内核任务TCB的高端线性地址
    18                                  
    19                                  ;-------------------------------------------------------------------------------
    20                                           ;以下是系统核心的头部，用于加载核心程序 
    21 00000000 [00000000]                       core_length      dd core_end       ;核心程序总长度#00
    22                                  
    23 00000004 [00000000]                       sys_routine_seg  dd section.sys_routine.start
    24                                                                              ;系统公用例程段位置#04
    25                                  
    26 00000008 [00000000]                       core_data_seg    dd section.core_data.start
    27                                                                              ;核心数据段位置#08
    28                                  
    29 0000000C [00000000]                       core_code_seg    dd section.core_code.start
    30                                                                              ;核心代码段位置#0c
    31                                  
    32                                  
    33 00000010 [F3030000]                       core_entry       dd start          ;核心代码段入口点#10
    34 00000014 3800                                              dw core_code_seg_sel
    35                                  
    36                                  ;===============================================================================
    37                                           [bits 32]
    38                                  ;===============================================================================
    39                                  SECTION sys_routine vstart=0                ;系统公共例程代码段 
    40                                  ;-------------------------------------------------------------------------------
    41                                           ;字符串显示例程
    42                                  put_string:                                 ;显示0终止的字符串并移动光标 
    43                                                                              ;输入：DS:EBX=串地址
    44 00000000 51                               push ecx
    45                                  
    46 00000001 FA                               cli
    47                                  
    48                                    .getc:
    49 00000002 8A0B                             mov cl,[ebx]
    50 00000004 08C9                             or cl,cl
    51 00000006 7408                             jz .exit
    52 00000008 E806000000                       call put_char
    53 0000000D 43                               inc ebx
    54 0000000E EBF2                             jmp .getc
    55                                  
    56                                    .exit:
    57 00000010 FB                               sti
    58                                  
    59 00000011 59                               pop ecx
    60 00000012 CB                               retf                               ;段间返回
    61                                  
    62                                  ;-------------------------------------------------------------------------------
    63                                  put_char:                                   ;在当前光标处显示一个字符,并推进
    64                                                                              ;光标。仅用于段内调用
    65                                                                              ;输入：CL=字符ASCII码
    66 00000013 60                               pushad
    67                                  
    68                                           ;以下取当前光标位置
    69 00000014 66BAD403                         mov dx,0x3d4
    70 00000018 B00E                             mov al,0x0e
    71 0000001A EE                               out dx,al
    72 0000001B 6642                             inc dx                             ;0x3d5
    73 0000001D EC                               in al,dx                           ;高字
    74 0000001E 88C4                             mov ah,al
    75                                  
    76 00000020 664A                             dec dx                             ;0x3d4
    77 00000022 B00F                             mov al,0x0f
    78 00000024 EE                               out dx,al
    79 00000025 6642                             inc dx                             ;0x3d5
    80 00000027 EC                               in al,dx                           ;低字
    81 00000028 6689C3                           mov bx,ax                          ;BX=代表光标位置的16位数
    82                                  
    83 0000002B 80F90D                           cmp cl,0x0d                        ;回车符？
    84 0000002E 750E                             jnz .put_0a
    85 00000030 6689D8                           mov ax,bx
    86 00000033 B350                             mov bl,80
    87 00000035 F6F3                             div bl
    88 00000037 F6E3                             mul bl
    89 00000039 6689C3                           mov bx,ax
    90 0000003C EB65                             jmp .set_cursor
    91                                  
    92                                    .put_0a:
    93 0000003E 80F90A                           cmp cl,0x0a                        ;换行符？
    94 00000041 7506                             jnz .put_other
    95 00000043 6683C350                         add bx,80
    96 00000047 EB15                             jmp .roll_screen
    97                                  
    98                                    .put_other:                               ;正常显示字符
    99 00000049 06                               push es
   100 0000004A B820000000                       mov eax,video_ram_seg_sel          ;0xb8000段的选择子
   101 0000004F 8EC0                             mov es,eax
   102 00000051 66D1E3                           shl bx,1
   103 00000054 2667880F                         mov [es:bx],cl
   104 00000058 07                               pop es
   105                                  
   106                                           ;以下将光标位置推进一个字符
   107 00000059 66D1EB                           shr bx,1
   108 0000005C 6643                             inc bx
   109                                  
   110                                    .roll_screen:
   111 0000005E 6681FBD007                       cmp bx,2000                        ;光标超出屏幕？滚屏
   112 00000063 7C3E                             jl .set_cursor
   113                                  
   114 00000065 6653                             push bx                            ;为了修改原书程序的逻辑问题，新增
   115 00000067 1E                               push ds
   116 00000068 06                               push es
   117 00000069 B820000000                       mov eax,video_ram_seg_sel
   118 0000006E 8ED8                             mov ds,eax
   119 00000070 8EC0                             mov es,eax
   120 00000072 FC                               cld
   121 00000073 BEA0000000                       mov esi,0xa0                       ;小心！32位模式下movsb/w/d
   122 00000078 BF00000000                       mov edi,0x00                       ;使用的是esi/edi/ecx
   123 0000007D B980070000                       mov ecx,1920
   124 00000082 F366A5                           rep movsw
   125 00000085 66BB000F                         mov bx,3840                        ;清除屏幕最底一行
   126 00000089 B950000000                       mov ecx,80                         ;32位程序应该使用ECX
   127                                    .cls:
   128 0000008E 266667C7072007                   mov word[es:bx],0x0720
   129 00000095 6683C302                         add bx,2
   130 00000099 E2F3                             loop .cls
   131                                  
   132 0000009B 07                               pop es
   133 0000009C 1F                               pop ds
   134                                  
   135                                           ;mov bx,1920                       ;为了修改原书程序的逻辑问题，删除
   136 0000009D 665B                             pop bx                             ;为了修改原书程序的逻辑问题，新增
   137 0000009F 6683EB50                         sub bx,80                          ;为了修改原书程序的逻辑问题，新增
   138                                  
   139                                    .set_cursor:
   140 000000A3 66BAD403                         mov dx,0x3d4
   141 000000A7 B00E                             mov al,0x0e
   142 000000A9 EE                               out dx,al
   143 000000AA 6642                             inc dx                             ;0x3d5
   144 000000AC 88F8                             mov al,bh
   145 000000AE EE                               out dx,al
   146 000000AF 664A                             dec dx                             ;0x3d4
   147 000000B1 B00F                             mov al,0x0f
   148 000000B3 EE                               out dx,al
   149 000000B4 6642                             inc dx                             ;0x3d5
   150 000000B6 88D8                             mov al,bl
   151 000000B8 EE                               out dx,al
   152                                  
   153 000000B9 61                               popad
   154 000000BA C3                               ret
   155                                  
   156                                  ;-------------------------------------------------------------------------------
   157                                  read_hard_disk_0:                           ;从硬盘读取一个逻辑扇区
   158                                                                              ;EAX=逻辑扇区号
   159                                                                              ;DS:EBX=目标缓冲区地址
   160                                                                              ;返回：EBX=EBX+512
   161 000000BB 50                               push eax 
   162 000000BC 51                               push ecx
   163 000000BD 52                               push edx
   164                                        
   165 000000BE 50                               push eax
   166                                  
   167 000000BF FA                               cli
   168                                  
   169 000000C0 66BAF201                         mov dx,0x1f2
   170 000000C4 B001                             mov al,1
   171 000000C6 EE                               out dx,al                          ;读取的扇区数
   172                                  
   173 000000C7 6642                             inc dx                             ;0x1f3
   174 000000C9 58                               pop eax
   175 000000CA EE                               out dx,al                          ;LBA地址7~0
   176                                  
   177 000000CB 6642                             inc dx                             ;0x1f4
   178 000000CD B108                             mov cl,8
   179 000000CF D3E8                             shr eax,cl
   180 000000D1 EE                               out dx,al                          ;LBA地址15~8
   181                                  
   182 000000D2 6642                             inc dx                             ;0x1f5
   183 000000D4 D3E8                             shr eax,cl
   184 000000D6 EE                               out dx,al                          ;LBA地址23~16
   185                                  
   186 000000D7 6642                             inc dx                             ;0x1f6
   187 000000D9 D3E8                             shr eax,cl
   188 000000DB 0CE0                             or al,0xe0                         ;第一硬盘  LBA地址27~24
   189 000000DD EE                               out dx,al
   190                                  
   191 000000DE 6642                             inc dx                             ;0x1f7
   192 000000E0 B020                             mov al,0x20                        ;读命令
   193 000000E2 EE                               out dx,al
   194                                  
   195                                    .waits:
   196 000000E3 EC                               in al,dx
   197 000000E4 2488                             and al,0x88
   198 000000E6 3C08                             cmp al,0x08
   199 000000E8 75F9                             jnz .waits                         ;不忙，且硬盘已准备好数据传输 
   200                                  
   201 000000EA B900010000                       mov ecx,256                        ;总共要读取的字数
   202 000000EF 66BAF001                         mov dx,0x1f0
   203                                    .readw:
   204 000000F3 66ED                             in ax,dx
   205 000000F5 668903                           mov [ebx],ax
   206 000000F8 83C302                           add ebx,2
   207 000000FB E2F6                             loop .readw
   208                                  
   209 000000FD FB                               sti
   210                                  
   211 000000FE 5A                               pop edx
   212 000000FF 59                               pop ecx
   213 00000100 58                               pop eax
   214                                        
   215 00000101 CB                               retf                               ;段间返回 
   216                                  
   217                                  ;-------------------------------------------------------------------------------
   218                                  ;汇编语言程序是极难一次成功，而且调试非常困难。这个例程可以提供帮助 
   219                                  put_hex_dword:                              ;在当前光标处以十六进制形式显示
   220                                                                              ;一个双字并推进光标 
   221                                                                              ;输入：EDX=要转换并显示的数字
   222                                                                              ;输出：无
   223 00000102 60                               pushad
   224 00000103 1E                               push ds
   225                                        
   226 00000104 66B83000                         mov ax,core_data_seg_sel           ;切换到核心数据段 
   227 00000108 8ED8                             mov ds,ax
   228                                        
   229 0000010A BB[A3070000]                     mov ebx,bin_hex                    ;指向核心数据段内的转换表
   230 0000010F B908000000                       mov ecx,8
   231                                    .xlt:    
   232 00000114 C1C204                           rol edx,4
   233 00000117 89D0                             mov eax,edx
   234 00000119 83E00F                           and eax,0x0000000f
   235 0000011C D7                               xlat
   236                                        
   237 0000011D 51                               push ecx
   238 0000011E 88C1                             mov cl,al                           
   239 00000120 E8EEFEFFFF                       call put_char
   240 00000125 59                               pop ecx
   241                                         
   242 00000126 E2EC                             loop .xlt
   243                                        
   244 00000128 1F                               pop ds
   245 00000129 61                               popad
   246 0000012A CB                               retf
   247                                  
   248                                  ;-------------------------------------------------------------------------------
   249                                  allocate_a_4k_page:                         ;分配一个4KB的页
   250                                                                              ;输入：无
   251                                                                              ;输出：EAX=页的物理地址
   252 0000012B 53                               push ebx
   253 0000012C 51                               push ecx
   254 0000012D 52                               push edx
   255 0000012E 1E                               push ds
   256                                  
   257 0000012F B830000000                       mov eax,core_data_seg_sel
   258 00000134 8ED8                             mov ds,eax
   259                                  
   260 00000136 31C0                             xor eax,eax
   261                                    .b1:
   262 00000138 0FAB05[0C000000]                 bts [page_bit_map],eax
   263 0000013F 7315                             jnc .b2
   264 00000141 40                               inc eax
   265 00000142 3D00020000                       cmp eax,page_map_len*8
   266 00000147 7CEF                             jl .b1
   267                                  
   268 00000149 BB[61070000]                     mov ebx,message_3
   269 0000014E 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   270 00000155 F4                               hlt                                ;没有可以分配的页，停机
   271                                  
   272                                    .b2:
   273 00000156 C1E00C                           shl eax,12                         ;乘以4096（0x1000）
   274                                  
   275 00000159 1F                               pop ds
   276 0000015A 5A                               pop edx
   277 0000015B 59                               pop ecx
   278 0000015C 5B                               pop ebx
   279                                  
   280 0000015D C3                               ret
   281                                  
   282                                  ;-------------------------------------------------------------------------------
   283                                  alloc_inst_a_page:                          ;分配一个页，并安装在当前活动的
   284                                                                              ;层级分页结构中
   285                                                                              ;输入：EBX=页的线性地址
   286 0000015E 50                               push eax
   287 0000015F 53                               push ebx
   288 00000160 51                               push ecx
   289 00000161 56                               push esi
   290 00000162 1E                               push ds
   291                                  
   292 00000163 B808000000                       mov eax,mem_0_4_gb_seg_sel
   293 00000168 8ED8                             mov ds,eax
   294                                  
   295                                           ;检查该线性地址所对应的页表是否存在
   296 0000016A 89DE                             mov esi,ebx
   297 0000016C 81E60000C0FF                     and esi,0xffc00000                 ;清除页表索引和页内偏移部分
   298 00000172 C1EE14                           shr esi,20                         ;将页目录索引乘以4作为页内偏移
   299 00000175 81CE00F0FFFF                     or esi,0xfffff000                  ;页目录自身的线性地址+表内偏移
   300                                  
   301 0000017B F70601000000                     test dword [esi],0x00000001        ;P位是否为“1”。检查该线性地址是
   302 00000181 752A                             jnz .b1                            ;否已经有对应的页表
   303                                  
   304                                           ;创建并安装该线性地址所对应的页表
   305 00000183 E8A3FFFFFF                       call allocate_a_4k_page            ;分配一个页做为页表
   306 00000188 83C807                           or eax,0x00000007
   307 0000018B 8906                             mov [esi],eax                      ;在页目录中登记该页表
   308                                  
   309                                           ;清空当前页表
   310 0000018D 89D8                             mov eax,ebx
   311 0000018F 250000C0FF                       and eax,0xffc00000
   312 00000194 C1E80A                           shr eax,10
   313 00000197 0D0000C0FF                       or eax,0xffc00000
   314 0000019C B900040000                       mov ecx,1024
   315                                    .cls0:
   316 000001A1 26C70000000000                   mov dword [es:eax],0x00000000
   317 000001A8 83C004                           add eax,4
   318 000001AB E2F4                             loop .cls0
   319                                  
   320                                    .b1:
   321                                           ;检查该线性地址对应的页表项（页）是否存在
   322 000001AD 89DE                             mov esi,ebx
   323 000001AF 81E600F0FFFF                     and esi,0xfffff000                 ;清除页内偏移部分
   324 000001B5 C1EE0A                           shr esi,10                         ;将页目录索引变成页表索引，页表索引乘以4作为页内偏移
   325 000001B8 81CE0000C0FF                     or esi,0xffc00000                  ;得到该线性地址对应的页表项
   326                                  
   327 000001BE F70601000000                     test dword [esi],0x00000001        ;P位是否为“1”。检查该线性地址是
   328 000001C4 750A                             jnz .b2                            ;否已经有对应的页
   329                                  
   330                                           ;创建并安装该线性地址所对应的页
   331 000001C6 E860FFFFFF                       call allocate_a_4k_page            ;分配一个页，这才是要安装的页
   332 000001CB 83C807                           or eax,0x00000007
   333 000001CE 8906                             mov [esi],eax
   334                                  
   335                                    .b2:
   336 000001D0 1F                               pop ds
   337 000001D1 5E                               pop esi
   338 000001D2 59                               pop ecx
   339 000001D3 5B                               pop ebx
   340 000001D4 58                               pop eax
   341                                  
   342 000001D5 CB                               retf
   343                                  
   344                                  ;-------------------------------------------------------------------------------
   345                                  create_copy_cur_pdir:                       ;创建新页目录，并复制当前页目录内容
   346                                                                              ;输入：无
   347                                                                              ;输出：EAX=新页目录的物理地址
   348 000001D6 1E                               push ds
   349 000001D7 06                               push es
   350 000001D8 56                               push esi
   351 000001D9 57                               push edi
   352 000001DA 53                               push ebx
   353 000001DB 51                               push ecx
   354                                  
   355 000001DC BB08000000                       mov ebx,mem_0_4_gb_seg_sel
   356 000001E1 8EDB                             mov ds,ebx
   357 000001E3 8EC3                             mov es,ebx
   358                                  
   359 000001E5 E841FFFFFF                       call allocate_a_4k_page
   360 000001EA 89C3                             mov ebx,eax
   361 000001EC 83CB07                           or ebx,0x00000007
   362 000001EF 891DF8FFFFFF                     mov [0xfffffff8],ebx
   363                                  
   364 000001F5 0F013DF8FFFFFF                   invlpg [0xfffffff8]
   365                                  
   366 000001FC BE00F0FFFF                       mov esi,0xfffff000                 ;ESI->当前页目录的线性地址
   367 00000201 BF00E0FFFF                       mov edi,0xffffe000                 ;EDI->新页目录的线性地址
   368 00000206 B900040000                       mov ecx,1024                       ;ECX=要复制的目录项数
   369 0000020B FC                               cld
   370 0000020C F3A5                             repe movsd
   371                                  
   372 0000020E 59                               pop ecx
   373 0000020F 5B                               pop ebx
   374 00000210 5F                               pop edi
   375 00000211 5E                               pop esi
   376 00000212 07                               pop es
   377 00000213 1F                               pop ds
   378                                  
   379 00000214 CB                               retf
   380                                  
   381                                  ;-------------------------------------------------------------------------------
   382                                  task_alloc_memory:                          ;在指定任务的虚拟内存空间中分配内存
   383                                                                              ;输入：EBX=任务控制块TCB的线性地址
   384                                                                              ;      ECX=希望分配的字节数
   385                                                                              ;输出：ECX=已分配的起始线性地址
   386 00000215 50                               push eax
   387                                  
   388 00000216 1E                               push ds
   389                                  
   390 00000217 53                               push ebx                           ;to A
   391                                  
   392                                           ;获得本次内存分配的起始线性地址
   393 00000218 66B80800                         mov ax,mem_0_4_gb_seg_sel
   394 0000021C 8ED8                             mov ds,ax
   395                                  
   396 0000021E 8B5B46                           mov ebx,[ebx+0x46]                 ;获得本次分配的起始线性地址
   397 00000221 89D8                             mov eax,ebx
   398 00000223 01D9                             add ecx,ebx                        ;本次分配，最后一个字节之后的线性地址
   399                                  
   400 00000225 51                               push ecx                           ;To B
   401                                  
   402                                           ;为请求的内存分配页
   403 00000226 81E300F0FFFF                     and ebx,0xfffff000
   404 0000022C 81E100F0FFFF                     and ecx,0xfffff000
   405                                    .next:
   406 00000232 9A[5E010000]2800                 call sys_routine_seg_sel:alloc_inst_a_page
   407                                                                              ;安装当前线性地址所在的页
   408 00000239 81C300100000                     add ebx,0x1000                     ;+4096
   409 0000023F 39CB                             cmp ebx,ecx
   410 00000241 7EEF                             jle .next
   411                                  
   412                                           ;将用于下一次分配的线性地址强制按4字节对齐
   413 00000243 59                               pop ecx                            ;B
   414                                  
   415 00000244 F7C103000000                     test ecx,0x00000003                ;线性地址是4字节对齐的吗？
   416 0000024A 7406                             jz .algn                           ;是，直接返回
   417 0000024C 83C104                           add ecx,4                          ;否，强制按4字节对齐
   418 0000024F 83E1FC                           and ecx,0xfffffffc
   419                                  
   420                                    .algn:
   421 00000252 5B                               pop ebx                            ;A
   422                                  
   423 00000253 894B46                           mov [ebx+0x46],ecx                 ;将下次分配可用的线性地址回存到TCB中
   424 00000256 89C1                             mov ecx,eax
   425                                  
   426 00000258 1F                               pop ds
   427                                  
   428 00000259 58                               pop eax
   429                                  
   430 0000025A CB                               retf
   431                                  
   432                                  ;-------------------------------------------------------------------------------
   433                                  allocate_memory:                            ;在当前任务的地址空间中分配内存
   434                                                                              ;输入：ECX=希望分配的字节数
   435                                                                              ;输出：ECX=起始线性地址 
   436 0000025B 50                               push eax
   437 0000025C 53                               push ebx
   438                                  
   439 0000025D 1E                               push ds
   440                                  
   441                                           ;得到TCB链表首节点的线性地址
   442 0000025E B830000000                       mov eax,core_data_seg_sel
   443 00000263 8ED8                             mov ds,eax
   444                                  
   445 00000265 A1[B30F0000]                     mov eax,[tcb_chain]                ;EAX=首节点的线性地址
   446                                  
   447 0000026A BB08000000                       mov ebx,mem_0_4_gb_seg_sel
   448 0000026F 8EDB                             mov ds,ebx
   449                                  
   450                                           ;搜索状态为忙（当前任务）的节点
   451                                    .s0:
   452 00000271 66837804FF                       cmp word [eax+0x04],0xffff
   453 00000276 7404                             jz .s1                             ;找到忙的节点，EAX=节点的线性地址
   454 00000278 8B00                             mov eax,[eax]
   455 0000027A EBF5                             jmp .s0
   456                                  
   457                                           ;开始分配内存
   458                                    .s1:
   459 0000027C 89C3                             mov ebx,eax
   460 0000027E 9A[15020000]2800                 call sys_routine_seg_sel:task_alloc_memory
   461                                  
   462 00000285 1F                               pop ds
   463                                  
   464 00000286 5B                               pop ebx
   465 00000287 58                               pop eax
   466                                  
   467 00000288 CB                               retf
   468                                  
   469                                  ;-------------------------------------------------------------------------------
   470                                  set_up_gdt_descriptor:                      ;在GDT内安装一个新的描述符
   471                                                                              ;输入：EDX:EAX=描述符 
   472                                                                              ;输出：CX=描述符的选择子
   473 00000289 50                               push eax
   474 0000028A 53                               push ebx
   475 0000028B 52                               push edx
   476                                  
   477 0000028C 1E                               push ds
   478 0000028D 06                               push es
   479                                  
   480 0000028E BB30000000                       mov ebx,core_data_seg_sel          ;切换到核心数据段
   481 00000293 8EDB                             mov ds,ebx
   482                                  
   483 00000295 0F0105[00000000]                 sgdt [pgdt]                        ;以便开始处理GDT
   484                                  
   485 0000029C BB08000000                       mov ebx,mem_0_4_gb_seg_sel
   486 000002A1 8EC3                             mov es,ebx
   487                                  
   488 000002A3 0FB71D[00000000]                 movzx ebx,word [pgdt]              ;GDT界限
   489 000002AA 6643                             inc bx                             ;GDT总字节数，也是下一个描述符偏移
   490 000002AC 031D[02000000]                   add ebx,[pgdt+2]                   ;下一个描述符的线性地址
   491                                  
   492 000002B2 268903                           mov [es:ebx],eax
   493 000002B5 26895304                         mov [es:ebx+4],edx
   494                                  
   495 000002B9 668305[00000000]08               add word [pgdt],8                  ;增加一个描述符的大小
   496                                  
   497 000002C1 0F0115[00000000]                 lgdt [pgdt]                        ;对GDT的更改生效
   498                                  
   499 000002C8 66A1[00000000]                   mov ax,[pgdt]                      ;得到GDT界限值
   500 000002CE 6631D2                           xor dx,dx
   501 000002D1 66BB0800                         mov bx,8
   502 000002D5 66F7F3                           div bx                             ;除以8，去掉余数
   503 000002D8 6689C1                           mov cx,ax
   504 000002DB 66C1E103                         shl cx,3                           ;将索引号移到正确位置
   505                                  
   506 000002DF 07                               pop es
   507 000002E0 1F                               pop ds
   508                                  
   509 000002E1 5A                               pop edx
   510 000002E2 5B                               pop ebx
   511 000002E3 58                               pop eax
   512                                  
   513 000002E4 CB                               retf
   514                                  ;-------------------------------------------------------------------------------
   515                                  make_seg_descriptor:                        ;构造存储器和系统的段描述符
   516                                                                              ;输入：EAX=线性基地址
   517                                                                              ;      EBX=段界限
   518                                                                              ;      ECX=属性。各属性位都在原始
   519                                                                              ;          位置，无关的位清零 
   520                                                                              ;返回：EDX:EAX=描述符
   521 000002E5 89C2                             mov edx,eax
   522 000002E7 C1E010                           shl eax,16
   523 000002EA 6609D8                           or ax,bx                           ;描述符前32位(EAX)构造完毕
   524                                  
   525 000002ED 81E20000FFFF                     and edx,0xffff0000                 ;清除基地址中无关的位
   526 000002F3 C1C208                           rol edx,8
   527 000002F6 0FCA                             bswap edx                          ;装配基址的31~24和23~16  (80486+)
   528                                  
   529 000002F8 6631DB                           xor bx,bx
   530 000002FB 09DA                             or edx,ebx                         ;装配段界限的高4位
   531                                  
   532 000002FD 09CA                             or edx,ecx                         ;装配属性
   533                                  
   534 000002FF CB                               retf
   535                                  
   536                                  ;-------------------------------------------------------------------------------
   537                                  make_gate_descriptor:                       ;构造门的描述符（调用门等）
   538                                                                              ;输入：EAX=门代码在段内偏移地址
   539                                                                              ;       BX=门代码所在段的选择子 
   540                                                                              ;       CX=段类型及属性等（各属
   541                                                                              ;          性位都在原始位置）
   542                                                                              ;返回：EDX:EAX=完整的描述符
   543 00000300 53                               push ebx
   544 00000301 51                               push ecx
   545                                        
   546 00000302 89C2                             mov edx,eax
   547 00000304 81E20000FFFF                     and edx,0xffff0000                 ;得到偏移地址高16位 
   548 0000030A 6609CA                           or dx,cx                           ;组装属性部分到EDX
   549                                         
   550 0000030D 25FFFF0000                       and eax,0x0000ffff                 ;得到偏移地址低16位 
   551 00000312 C1E310                           shl ebx,16                          
   552 00000315 09D8                             or eax,ebx                         ;组装段选择子部分
   553                                        
   554 00000317 59                               pop ecx
   555 00000318 5B                               pop ebx
   556                                        
   557 00000319 CB                               retf                                   
   558                                                               
   559                                  ;-------------------------------------------------------------------------------
   560                                  initiate_task_switch:                       ;主动发起任务切换
   561                                                                              ;输入：无
   562                                                                              ;输出：无。
   563 0000031A 60                               pushad
   564 0000031B 1E                               push ds
   565 0000031C 06                               push es
   566                                  
   567 0000031D B830000000                       mov eax,core_data_seg_sel
   568 00000322 8EC0                             mov es,eax
   569                                  
   570 00000324 B808000000                       mov eax,mem_0_4_gb_seg_sel
   571 00000329 8ED8                             mov ds,eax
   572                                  
   573 0000032B 26A1[B30F0000]                   mov eax,[es:tcb_chain]
   574 00000331 83F800                           cmp eax,0
   575 00000334 7446                             jz .return
   576                                  
   577                                           ;搜索状态为忙（当前任务）的节点
   578                                    .b0:
   579 00000336 66837804FF                       cmp word [eax+0x04],0xffff
   580 0000033B 0F44F0                           cmove esi,eax                     ;找到忙的节点，ESI=节点的线性地址
   581 0000033E 7404                             jz .b1
   582 00000340 8B00                             mov eax,[eax]
   583 00000342 EBF2                             jmp .b0
   584                                  
   585                                           ;从当前节点继续搜索就绪任务的节点
   586                                    .b1:
   587 00000344 8B18                             mov ebx,[eax]
   588 00000346 09DB                             or ebx,ebx
   589 00000348 740E                             jz .b2                            ;到链表尾部也未发现就绪节点，从头找
   590 0000034A 66837B0400                       cmp word [ebx+0x04],0x0000
   591 0000034F 0F44FB                           cmove edi,ebx                     ;已找到就绪节点，EDI=节点的线性地址
   592 00000352 741D                             jz .b3
   593 00000354 89D8                             mov eax,ebx
   594 00000356 EBEC                             jmp .b1
   595                                  
   596                                    .b2:
   597 00000358 268B1D[B30F0000]                 mov ebx,[es:tcb_chain]            ;EBX=链表首节点线性地址
   598                                    .b20:
   599 0000035F 66837B0400                       cmp word [ebx+0x04],0x0000
   600 00000364 0F44FB                           cmove edi,ebx                     ;已找到就绪节点，EDI=节点的线性地址
   601 00000367 7408                             jz .b3
   602 00000369 8B1B                             mov ebx,[ebx]
   603 0000036B 09DB                             or ebx,ebx
   604 0000036D 740D                             jz .return                        ;链表中已经不存在就绪任务，返回
   605 0000036F EBEE                             jmp .b20
   606                                  
   607                                           ;就绪任务的节点已经找到，准备切换到该任务
   608                                    .b3:
   609 00000371 66F75604                         not word [esi+0x04]               ;将忙状态的节点改为就绪状态的节点
   610 00000375 66F75704                         not word [edi+0x04]               ;将就绪状态的节点改为忙状态的节点
   611 00000379 FF6F14                           jmp far [edi+0x14]                ;任务切换
   612                                  
   613                                    .return:
   614 0000037C 07                               pop es
   615 0000037D 1F                               pop ds
   616 0000037E 61                               popad
   617                                  
   618 0000037F CB                               retf
   619                                  
   620                                  ;-------------------------------------------------------------------------------
   621                                  terminate_current_task:                     ;终止当前任务
   622                                                                              ;注意，执行此例程时，当前任务仍在
   623                                                                              ;运行中。此例程其实也是当前任务的
   624                                                                              ;一部分 
   625 00000380 B830000000                       mov eax,core_data_seg_sel
   626 00000385 8EC0                             mov es,eax
   627                                  
   628 00000387 B808000000                       mov eax,mem_0_4_gb_seg_sel
   629 0000038C 8ED8                             mov ds,eax
   630                                  
   631 0000038E 26A1[B30F0000]                   mov eax,[es:tcb_chain]
   632                                                                              ;EAX=首节点的线性地址
   633                                           ;搜索状态为忙（当前任务）的节点
   634                                    .s0:
   635 00000394 66837804FF                       cmp word [eax+0x04],0xffff
   636 00000399 7404                             jz .s1                             ;找到忙的节点，EAX=节点的线性地址
   637 0000039B 8B00                             mov eax,[eax]
   638 0000039D EBF5                             jmp .s0
   639                                  
   640                                           ;将状态为忙的节点改成终止状态
   641                                    .s1:
   642 0000039F 66C740043333                     mov word [eax+0x04],0x3333
   643                                  
   644                                           ;搜索就绪状态的任务
   645 000003A5 268B1D[B30F0000]                 mov ebx,[es:tcb_chain]            ;EBX=链表首节点线性地址
   646                                    .s2:
   647 000003AC 66837B0400                       cmp word [ebx+0x04],0x0000
   648 000003B1 7404                             jz .s3                            ;已找到就绪节点，EBX=节点的线性地址
   649 000003B3 8B1B                             mov ebx,[ebx]
   650 000003B5 EBF5                             jmp .s2
   651                                  
   652                                           ;就绪任务的节点已经找到，准备切换到该任务
   653                                    .s3:
   654 000003B7 66F75304                         not word [ebx+0x04]               ;将就绪状态的节点改为忙状态的节点
   655 000003BB FF6B14                           jmp far [ebx+0x14]                ;任务切换
   656                                  
   657                                  ;-------------------------------------------------------------------------------
   658                                  general_interrupt_handler:                  ;通用的中断处理过程
   659 000003BE 50                               push eax
   660                                  
   661 000003BF B020                             mov al,0x20                        ;中断结束命令EOI
   662 000003C1 E6A0                             out 0xa0,al                        ;向从片发送
   663 000003C3 E620                             out 0x20,al                        ;向主片发送
   664                                  
   665 000003C5 58                               pop eax
   666                                  
   667 000003C6 CF                               iretd
   668                                  
   669                                  ;-------------------------------------------------------------------------------
   670                                  general_exception_handler:                  ;通用的异常处理过程
   671 000003C7 BB[7F070000]                     mov ebx,excep_msg
   672 000003CC 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   673                                  
   674 000003D3 FA                               cli
   675                                  
   676 000003D4 F4                               hlt
   677                                  
   678                                  ;-------------------------------------------------------------------------------
   679                                  rtm_0x70_interrupt_handle:                  ;实时时钟中断处理过程
   680                                  
   681 000003D5 60                               pushad
   682                                  
   683 000003D6 B020                             mov al,0x20                        ;中断结束命令EOI
   684 000003D8 E6A0                             out 0xa0,al                        ;向8259A从片发送
   685 000003DA E620                             out 0x20,al                        ;向8259A主片发送
   686                                  
   687 000003DC B00C                             mov al,0x0c                        ;寄存器C的索引。且开放NMI
   688 000003DE E670                             out 0x70,al
   689 000003E0 E471                             in al,0x71                         ;读一下RTC的寄存器C，否则只发生一次中断
   690                                                                              ;此处不考虑闹钟和周期性中断的情况
   691                                           ;请求任务调度
   692 000003E2 9A[1A030000]2800                 call sys_routine_seg_sel:initiate_task_switch
   693                                  
   694 000003E9 61                               popad
   695                                  
   696 000003EA CF                               iretd
   697                                  
   698                                  ;-------------------------------------------------------------------------------
   699                                  do_task_clean:                             ;清理已经终止的任务并回收资源
   700                                  
   701                                           ;搜索TCB链表，找到状态为终止的节点
   702                                           ;将节点从链表中拆除
   703                                           ;回收任务占用的各种资源（可以从它的TCB中找到）
   704                                  
   705 000003EB CB                               retf
   706                                  
   707                                  sys_routine_end:
   708                                  
   709                                  ;===============================================================================
   710                                  SECTION core_data vstart=0                  ;系统核心的数据段 
   711                                  ;------------------------------------------------------------------------------- 
   712 00000000 0000                             pgdt             dw  0             ;用于设置和修改GDT 
   713 00000002 00000000                                          dd  0
   714                                  
   715 00000006 0000                             pidt             dw  0
   716 00000008 00000000                                          dd  0
   717                                  
   718 0000000C FFFFFFFFFFFF5555                 page_bit_map     db  0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x55
   719 00000014 FFFFFFFFFFFFFFFF                                  db  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
   720 0000001C FFFFFFFFFFFFFFFF                                  db  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
   721 00000024 FFFFFFFFFFFFFFFF                                  db  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
   722 0000002C 5555555555555555                                  db  0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55
   723 00000034 0000000000000000                                  db  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
   724 0000003C 0000000000000000                                  db  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
   725 00000044 0000000000000000                                  db  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
   726                                           page_map_len     equ $-page_bit_map
   727                                  
   728                                           ;符号地址检索表
   729                                           salt:
   730 0000004C 405072696E74537472-              salt_1           db  '@PrintString'
   730 00000055 696E67             
   731 00000058 00<rep F4h>                                  times 256-($-salt_1) db 0
   732 0000014C [00000000]                                        dd  put_string
   733 00000150 2800                                              dw  sys_routine_seg_sel
   734                                  
   735 00000152 40526561644469736B-              salt_2           db  '@ReadDiskData'
   735 0000015B 44617461           
   736 0000015F 00<rep F3h>                                  times 256-($-salt_2) db 0
   737 00000252 [BB000000]                                        dd  read_hard_disk_0
   738 00000256 2800                                              dw  sys_routine_seg_sel
   739                                  
   740 00000258 405072696E7444776F-              salt_3           db  '@PrintDwordAsHexString'
   740 00000261 726441734865785374-
   740 0000026A 72696E67           
   741 0000026E 00<rep EAh>                                  times 256-($-salt_3) db 0
   742 00000358 [02010000]                                        dd  put_hex_dword
   743 0000035C 2800                                              dw  sys_routine_seg_sel
   744                                  
   745 0000035E 405465726D696E6174-              salt_4           db  '@TerminateProgram'
   745 00000367 6550726F6772616D   
   746 0000036F 00<rep EFh>                                  times 256-($-salt_4) db 0
   747 0000045E [80030000]                                        dd  terminate_current_task
   748 00000462 2800                                              dw  sys_routine_seg_sel
   749                                  
   750 00000464 40496E69745461736B-              salt_5           db  '@InitTaskSwitch'
   750 0000046D 537769746368       
   751 00000473 00<rep F1h>                                  times 256-($-salt_5) db 0
   752 00000564 [1A030000]                                        dd  initiate_task_switch
   753 00000568 2800                                              dw  sys_routine_seg_sel
   754                                  
   755 0000056A 406D616C6C6F63                   salt_6           db  '@malloc'
   756 00000571 00<rep F9h>                                  times 256-($-salt_6) db 0
   757 0000066A [5B020000]                                        dd  allocate_memory
   758 0000066E 2800                                              dw  sys_routine_seg_sel
   759                                  
   760                                           salt_item_len   equ $-salt_6
   761                                           salt_items      equ ($-salt)/salt_item_len
   762                                  
   763 00000670 202053797374656D20-              message_0        db  '  System core is runing in protect mode,'
   763 00000679 636F72652069732072-
   763 00000682 756E696E6720696E20-
   763 0000068B 70726F74656374206D-
   763 00000694 6F64652C           
   764 00000698 494454206973206D6F-                               db  'IDT is mounted.',0x0d,0x0a,0
   764 000006A1 756E7465642E0D0A00 
   765                                  
   766 000006AA 0D0A202000                       cpu_brnd0        db  0x0d,0x0a,'  ',0
   767 000006AF 00<rep 34h>                      cpu_brand  times 52  db 0
   768 000006E3 0D0A0D0A00                       cpu_brnd1        db  0x0d,0x0a,0x0d,0x0a,0
   769                                  
   770 000006E8 2020506167696E6720-              message_1        db  '  Paging is enabled.System core is mapped to'
   770 000006F1 697320656E61626C65-
   770 000006FA 642E53797374656D20-
   770 00000703 636F7265206973206D-
   770 0000070C 617070656420746F   
   771 00000714 206C696E6561722061-                               db  ' linear address 0x80000000.',0x0d,0x0a,0
   771 0000071D 646472657373203078-
   771 00000726 38303030303030302E-
   771 0000072F 0D0A00             
   772                                  
   773 00000732 202053797374656D20-              message_2        db  '  System wide CALL-GATE mounted and test OK.'
   773 0000073B 776964652043414C4C-
   773 00000744 2D47415445206D6F75-
   773 0000074D 6E74656420616E6420-
   773 00000756 74657374204F4B2E   
   774 0000075E 0D0A00                                            db  0x0d,0x0a,0
   775                                  
   776 00000761 2A2A2A2A2A2A2A2A4E-              message_3        db  '********No more pages********',0
   776 0000076A 6F206D6F7265207061-
   776 00000773 6765732A2A2A2A2A2A-
   776 0000077C 2A2A00             
   777                                  
   778 0000077F 2A2A2A2A2A2A2A2A45-              excep_msg        db  '********Exception encounted********',0
   778 00000788 7863657074696F6E20-
   778 00000791 656E636F756E746564-
   778 0000079A 2A2A2A2A2A2A2A2A00 
   779                                  
   780 000007A3 303132333435363738-              bin_hex          db '0123456789ABCDEF'
   780 000007AC 39414243444546     
   781                                                                              ;put_hex_dword子过程用的查找表 
   782                                  
   783 000007B3 00<rep 800h>                     core_buf   times 2048 db 0         ;内核用的缓冲区
   784                                  
   785                                           ;任务控制块链
   786 00000FB3 00000000                         tcb_chain        dd  0
   787                                  
   788 00000FB7 2020436F7265207461-              core_msg1        db  '  Core task created.',0x0d,0x0a,0
   788 00000FC0 736B20637265617465-
   788 00000FC9 642E0D0A00         
   789                                                   
   790 00000FCE 5B434F524520544153-              core_msg2        db  '[CORE TASK]: I am working!',0x0d,0x0a,0
   790 00000FD7 4B5D3A204920616D20-
   790 00000FE0 776F726B696E67210D-
   790 00000FE9 0A00               
   791                                  
   792                                  core_data_end:
   793                                                 
   794                                  ;===============================================================================
   795                                  SECTION core_code vstart=0
   796                                  ;-------------------------------------------------------------------------------
   797                                  fill_descriptor_in_ldt:                     ;在LDT内安装一个新的描述符
   798                                                                              ;输入：EDX:EAX=描述符
   799                                                                              ;          EBX=TCB基地址
   800                                                                              ;输出：CX=描述符的选择子
   801 00000000 50                               push eax
   802 00000001 52                               push edx
   803 00000002 57                               push edi
   804 00000003 1E                               push ds
   805                                  
   806 00000004 B908000000                       mov ecx,mem_0_4_gb_seg_sel
   807 00000009 8ED9                             mov ds,ecx
   808                                  
   809 0000000B 8B7B0C                           mov edi,[ebx+0x0c]                 ;获得LDT基地址
   810                                           
   811 0000000E 31C9                             xor ecx,ecx
   812 00000010 668B4B0A                         mov cx,[ebx+0x0a]                  ;获得LDT界限
   813 00000014 6641                             inc cx                             ;LDT的总字节数，即新描述符偏移地址
   814                                           
   815 00000016 89040F                           mov [edi+ecx+0x00],eax
   816 00000019 89540F04                         mov [edi+ecx+0x04],edx             ;安装描述符
   817                                  
   818 0000001D 6683C108                         add cx,8                           
   819 00000021 6649                             dec cx                             ;得到新的LDT界限值 
   820                                  
   821 00000023 66894B0A                         mov [ebx+0x0a],cx                  ;更新LDT界限值到TCB
   822                                  
   823 00000027 6689C8                           mov ax,cx
   824 0000002A 6631D2                           xor dx,dx
   825 0000002D 66B90800                         mov cx,8
   826 00000031 66F7F1                           div cx
   827                                           
   828 00000034 6689C1                           mov cx,ax
   829 00000037 66C1E103                         shl cx,3                           ;左移3位，并且
   830 0000003B 6683C904                         or cx,0000_0000_0000_0100B         ;使TI位=1，指向LDT，最后使RPL=00 
   831                                  
   832 0000003F 1F                               pop ds
   833 00000040 5F                               pop edi
   834 00000041 5A                               pop edx
   835 00000042 58                               pop eax
   836                                       
   837 00000043 C3                               ret
   838                                           
   839                                  ;------------------------------------------------------------------------------- 
   840                                  load_relocate_program:                      ;加载并重定位用户程序
   841                                                                              ;输入: PUSH 逻辑扇区号
   842                                                                              ;      PUSH 任务控制块基地址
   843                                                                              ;输出：无 
   844 00000044 60                               pushad
   845                                        
   846 00000045 1E                               push ds
   847 00000046 06                               push es
   848                                        
   849 00000047 89E5                             mov ebp,esp                        ;为访问通过堆栈传递的参数做准备
   850                                        
   851 00000049 B908000000                       mov ecx,mem_0_4_gb_seg_sel
   852 0000004E 8EC1                             mov es,ecx
   853                                  
   854                                           ;清空当前页目录的前半部分（对应低2GB的局部地址空间）
   855 00000050 BB00F0FFFF                       mov ebx,0xfffff000
   856 00000055 31F6                             xor esi,esi
   857                                    .clsp:
   858 00000057 26C704B300000000                 mov dword [es:ebx+esi*4],0x00000000
   859 0000005F 46                               inc esi
   860 00000060 81FE00020000                     cmp esi,512
   861 00000066 7CEF                             jl .clsp
   862                                  
   863 00000068 0F20DB                           mov ebx,cr3                        ;刷新TLB
   864 0000006B 0F22DB                           mov cr3,ebx
   865                                  
   866 0000006E 8B752C                           mov esi,[ebp+11*4]                 ;从堆栈中取得TCB的基地址
   867                                  
   868                                           ;以下申请创建LDT所需要的内存
   869 00000071 89F3                             mov ebx,esi
   870 00000073 B9A0000000                       mov ecx,160                        ;允许安装20个LDT描述符
   871 00000078 9A[15020000]2800                 call sys_routine_seg_sel:task_alloc_memory
   872 0000007F 26894E0C                         mov [es:esi+0x0c],ecx              ;登记LDT基地址到TCB中
   873 00000083 2666C7460AFFFF                   mov word [es:esi+0x0a],0xffff      ;登记LDT初始的界限到TCB中 
   874                                  
   875                                           ;以下开始加载用户程序 
   876 0000008A B830000000                       mov eax,core_data_seg_sel
   877 0000008F 8ED8                             mov ds,eax                         ;切换DS到内核数据段
   878                                         
   879 00000091 8B4530                           mov eax,[ebp+12*4]                 ;从堆栈中取出用户程序起始扇区号 
   880 00000094 BB[B3070000]                     mov ebx,core_buf                   ;读取程序头部数据     
   881 00000099 9A[BB000000]2800                 call sys_routine_seg_sel:read_hard_disk_0
   882                                  
   883                                           ;以下判断整个程序有多大
   884 000000A0 A1[B3070000]                     mov eax,[core_buf]                 ;程序尺寸
   885 000000A5 89C3                             mov ebx,eax
   886 000000A7 81E300FEFFFF                     and ebx,0xfffffe00                 ;使之512字节对齐（能被512整除的数低 
   887 000000AD 81C300020000                     add ebx,512                        ;9位都为0 
   888 000000B3 A9FF010000                       test eax,0x000001ff                ;程序的大小正好是512的倍数吗? 
   889 000000B8 0F45C3                           cmovnz eax,ebx                     ;不是。使用凑整的结果
   890                                        
   891 000000BB 89C1                             mov ecx,eax                        ;实际需要申请的内存数量
   892 000000BD 89F3                             mov ebx,esi
   893 000000BF 9A[15020000]2800                 call sys_routine_seg_sel:task_alloc_memory
   894 000000C6 26894E06                         mov [es:esi+0x06],ecx              ;登记程序加载基地址到TCB中
   895                                        
   896 000000CA 89CB                             mov ebx,ecx                        ;ebx -> 申请到的内存首地址
   897 000000CC 31D2                             xor edx,edx
   898 000000CE B900020000                       mov ecx,512
   899 000000D3 F7F1                             div ecx
   900 000000D5 89C1                             mov ecx,eax                        ;总扇区数 
   901                                        
   902 000000D7 B808000000                       mov eax,mem_0_4_gb_seg_sel         ;切换DS到0-4GB的段
   903 000000DC 8ED8                             mov ds,eax
   904                                  
   905 000000DE 8B4530                           mov eax,[ebp+12*4]                 ;起始扇区号 
   906                                    .b1:
   907 000000E1 9A[BB000000]2800                 call sys_routine_seg_sel:read_hard_disk_0
   908 000000E8 40                               inc eax
   909 000000E9 E2F6                             loop .b1                           ;循环读，直到读完整个用户程序
   910                                  
   911 000000EB 268B7E06                         mov edi,[es:esi+0x06]              ;获得程序加载基地址
   912                                  
   913                                           ;建立程序头部段描述符
   914 000000EF 89F8                             mov eax,edi                        ;程序头部起始线性地址
   915 000000F1 8B5F04                           mov ebx,[edi+0x04]                 ;段长度
   916 000000F4 4B                               dec ebx                            ;段界限
   917 000000F5 B900F24000                       mov ecx,0x0040f200                 ;字节粒度的数据段描述符，特权级3 
   918 000000FA 9A[E5020000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   919                                        
   920                                           ;安装头部段描述符到LDT中 
   921 00000101 89F3                             mov ebx,esi                        ;TCB的基地址
   922 00000103 E8F8FEFFFF                       call fill_descriptor_in_ldt
   923                                  
   924 00000108 6683C903                         or cx,0000_0000_0000_0011B         ;设置选择子的特权级为3
   925 0000010C 2666894E44                       mov [es:esi+0x44],cx               ;登记程序头部段选择子到TCB 
   926 00000111 66894F04                         mov [edi+0x04],cx                  ;和头部内 
   927                                        
   928                                           ;建立程序代码段描述符
   929 00000115 89F8                             mov eax,edi
   930 00000117 03470C                           add eax,[edi+0x0c]                 ;代码起始线性地址
   931 0000011A 8B5F10                           mov ebx,[edi+0x10]                 ;段长度
   932 0000011D 4B                               dec ebx                            ;段界限
   933 0000011E B900F84000                       mov ecx,0x0040f800                 ;字节粒度的代码段描述符，特权级3
   934 00000123 9A[E5020000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   935 0000012A 89F3                             mov ebx,esi                        ;TCB的基地址
   936 0000012C E8CFFEFFFF                       call fill_descriptor_in_ldt
   937 00000131 6683C903                         or cx,0000_0000_0000_0011B         ;设置选择子的特权级为3
   938 00000135 66894F0C                         mov [edi+0x0c],cx                  ;登记代码段选择子到头部
   939                                  
   940                                           ;建立程序数据段描述符
   941 00000139 89F8                             mov eax,edi
   942 0000013B 034714                           add eax,[edi+0x14]                 ;数据段起始线性地址
   943 0000013E 8B5F18                           mov ebx,[edi+0x18]                 ;段长度
   944 00000141 4B                               dec ebx                            ;段界限 
   945 00000142 B900F24000                       mov ecx,0x0040f200                 ;字节粒度的数据段描述符，特权级3
   946 00000147 9A[E5020000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   947 0000014E 89F3                             mov ebx,esi                        ;TCB的基地址
   948 00000150 E8ABFEFFFF                       call fill_descriptor_in_ldt
   949 00000155 6683C903                         or cx,0000_0000_0000_0011B         ;设置选择子的特权级为3
   950 00000159 66894F14                         mov [edi+0x14],cx                  ;登记数据段选择子到头部
   951                                  
   952                                           ;建立程序堆栈段描述符
   953 0000015D 89F8                             mov eax,edi
   954 0000015F 03471C                           add eax,[edi+0x1c]                 ;数据段起始线性地址
   955 00000162 8B5F20                           mov ebx,[edi+0x20]                 ;段长度
   956 00000165 4B                               dec ebx                            ;段界限
   957 00000166 B900F24000                       mov ecx,0x0040f200                 ;字节粒度的堆栈段描述符，特权级3
   958 0000016B 9A[E5020000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   959 00000172 89F3                             mov ebx,esi                        ;TCB的基地址
   960 00000174 E887FEFFFF                       call fill_descriptor_in_ldt
   961 00000179 6683C903                         or cx,0000_0000_0000_0011B         ;设置选择子的特权级为3
   962 0000017D 66894F1C                         mov [edi+0x1c],cx                  ;登记堆栈段选择子到头部
   963                                  
   964                                           ;重定位SALT 
   965 00000181 B808000000                       mov eax,mem_0_4_gb_seg_sel         ;这里和前一章不同，头部段描述符
   966 00000186 8EC0                             mov es,eax                         ;已安装，但还没有生效，故只能通
   967                                                                              ;过4GB段访问用户程序头部          
   968 00000188 B830000000                       mov eax,core_data_seg_sel
   969 0000018D 8ED8                             mov ds,eax
   970                                        
   971 0000018F FC                               cld
   972                                  
   973 00000190 268B4F24                         mov ecx,[es:edi+0x24]              ;U-SALT条目数(通过访问4GB段取得) 
   974 00000194 83C728                           add edi,0x28                       ;U-SALT在4GB段内的偏移 
   975                                    .b2: 
   976 00000197 51                               push ecx
   977 00000198 57                               push edi
   978                                        
   979 00000199 B906000000                       mov ecx,salt_items
   980 0000019E BE[4C000000]                     mov esi,salt
   981                                    .b3:
   982 000001A3 57                               push edi
   983 000001A4 56                               push esi
   984 000001A5 51                               push ecx
   985                                  
   986 000001A6 B940000000                       mov ecx,64                         ;检索表中，每条目的比较次数 
   987 000001AB F3A7                             repe cmpsd                         ;每次比较4字节 
   988 000001AD 7519                             jnz .b4
   989 000001AF 8B06                             mov eax,[esi]                      ;若匹配，则esi恰好指向其后的地址
   990 000001B1 26898700FFFFFF                   mov [es:edi-256],eax               ;将字符串改写成偏移地址 
   991 000001B8 668B4604                         mov ax,[esi+4]
   992 000001BC 6683C803                         or ax,0000000000000011B            ;以用户程序自己的特权级使用调用门
   993                                                                              ;故RPL=3 
   994 000001C0 2666898704FFFFFF                 mov [es:edi-252],ax                ;回填调用门选择子 
   995                                    .b4:
   996                                        
   997 000001C8 59                               pop ecx
   998 000001C9 5E                               pop esi
   999 000001CA 81C606010000                     add esi,salt_item_len
  1000 000001D0 5F                               pop edi                            ;从头比较 
  1001 000001D1 E2D0                             loop .b3
  1002                                        
  1003 000001D3 5F                               pop edi
  1004 000001D4 81C700010000                     add edi,256
  1005 000001DA 59                               pop ecx
  1006 000001DB E2BA                             loop .b2
  1007                                  
  1008 000001DD 8B752C                           mov esi,[ebp+11*4]                 ;从堆栈中取得TCB的基地址
  1009                                  
  1010                                           ;创建0特权级栈
  1011 000001E0 B900000000                       mov ecx,0                          ;以4KB为单位的栈段界限值
  1012 000001E5 26894E1A                         mov [es:esi+0x1a],ecx              ;登记0特权级栈界限到TCB
  1013 000001E9 41                               inc ecx
  1014 000001EA C1E10C                           shl ecx,12                         ;乘以4096，得到段大小
  1015 000001ED 51                               push ecx
  1016 000001EE 89F3                             mov ebx,esi
  1017 000001F0 9A[15020000]2800                 call sys_routine_seg_sel:task_alloc_memory
  1018 000001F7 26894E1E                         mov [es:esi+0x1e],ecx              ;登记0特权级栈基地址到TCB
  1019 000001FB 89C8                             mov eax,ecx
  1020 000001FD 268B5E1A                         mov ebx,[es:esi+0x1a]              ;段长度（界限）
  1021 00000201 B90092C000                       mov ecx,0x00c09200                 ;4KB粒度，读写，特权级0
  1022 00000206 9A[E5020000]2800                 call sys_routine_seg_sel:make_seg_descriptor
  1023 0000020D 89F3                             mov ebx,esi                        ;TCB的基地址
  1024 0000020F E8ECFDFFFF                       call fill_descriptor_in_ldt
  1025                                           ;or cx,0000_0000_0000_0000          ;设置选择子的特权级为0
  1026 00000214 2666894E22                       mov [es:esi+0x22],cx               ;登记0特权级堆栈选择子到TCB
  1027 00000219 268F4624                         pop dword [es:esi+0x24]            ;登记0特权级堆栈初始ESP到TCB
  1028                                  
  1029                                           ;创建1特权级堆栈
  1030 0000021D B900000000                       mov ecx,0
  1031 00000222 26894E28                         mov [es:esi+0x28],ecx              ;登记1特权级堆栈尺寸到TCB
  1032 00000226 41                               inc ecx
  1033 00000227 C1E10C                           shl ecx,12                         ;乘以4096，得到段大小
  1034 0000022A 51                               push ecx
  1035 0000022B 89F3                             mov ebx,esi
  1036 0000022D 9A[15020000]2800                 call sys_routine_seg_sel:task_alloc_memory
  1037 00000234 26894E2C                         mov [es:esi+0x2c],ecx              ;登记1特权级堆栈基地址到TCB
  1038 00000238 89C8                             mov eax,ecx
  1039 0000023A 268B5E28                         mov ebx,[es:esi+0x28]              ;段长度（界限）
  1040 0000023E B900B2C000                       mov ecx,0x00c0b200                 ;4KB粒度，读写，特权级1
  1041 00000243 9A[E5020000]2800                 call sys_routine_seg_sel:make_seg_descriptor
  1042 0000024A 89F3                             mov ebx,esi                        ;TCB的基地址
  1043 0000024C E8AFFDFFFF                       call fill_descriptor_in_ldt
  1044 00000251 6683C901                         or cx,0000_0000_0000_0001          ;设置选择子的特权级为1
  1045 00000255 2666894E30                       mov [es:esi+0x30],cx               ;登记1特权级堆栈选择子到TCB
  1046 0000025A 268F4632                         pop dword [es:esi+0x32]            ;登记1特权级堆栈初始ESP到TCB
  1047                                  
  1048                                           ;创建2特权级堆栈
  1049 0000025E B900000000                       mov ecx,0
  1050 00000263 26894E36                         mov [es:esi+0x36],ecx              ;登记2特权级堆栈尺寸到TCB
  1051 00000267 41                               inc ecx
  1052 00000268 C1E10C                           shl ecx,12                         ;乘以4096，得到段大小
  1053 0000026B 51                               push ecx
  1054 0000026C 89F3                             mov ebx,esi
  1055 0000026E 9A[15020000]2800                 call sys_routine_seg_sel:task_alloc_memory
  1056 00000275 26894E3A                         mov [es:esi+0x3a],ecx              ;登记2特权级堆栈基地址到TCB
  1057 00000279 89C8                             mov eax,ecx
  1058 0000027B 268B5E36                         mov ebx,[es:esi+0x36]              ;段长度（界限）
  1059 0000027F B900D2C000                       mov ecx,0x00c0d200                 ;4KB粒度，读写，特权级2
  1060 00000284 9A[E5020000]2800                 call sys_routine_seg_sel:make_seg_descriptor
  1061 0000028B 89F3                             mov ebx,esi                        ;TCB的基地址
  1062 0000028D E86EFDFFFF                       call fill_descriptor_in_ldt
  1063 00000292 6683C90A                         or cx,0000_0000_0000_0010          ;设置选择子的特权级为2
  1064 00000296 2666894E3E                       mov [es:esi+0x3e],cx               ;登记2特权级堆栈选择子到TCB
  1065 0000029B 268F4640                         pop dword [es:esi+0x40]            ;登记2特权级堆栈初始ESP到TCB
  1066                                  
  1067                                           ;在GDT中登记LDT描述符
  1068 0000029F 268B460C                         mov eax,[es:esi+0x0c]              ;LDT的起始线性地址
  1069 000002A3 260FB75E0A                       movzx ebx,word [es:esi+0x0a]       ;LDT段界限
  1070 000002A8 B900820000                       mov ecx,0x00008200                 ;LDT描述符，特权级0
  1071 000002AD 9A[E5020000]2800                 call sys_routine_seg_sel:make_seg_descriptor
  1072 000002B4 9A[89020000]2800                 call sys_routine_seg_sel:set_up_gdt_descriptor
  1073 000002BB 2666894E10                       mov [es:esi+0x10],cx               ;登记LDT选择子到TCB中
  1074                                         
  1075                                           ;创建用户程序的TSS
  1076 000002C0 B968000000                       mov ecx,104                        ;tss的基本尺寸
  1077 000002C5 2666894E12                       mov [es:esi+0x12],cx              
  1078 000002CA 2666FF4E12                       dec word [es:esi+0x12]             ;登记TSS界限值到TCB 
  1079 000002CF 9A[5B020000]2800                 call sys_routine_seg_sel:allocate_memory
  1080 000002D6 26894E14                         mov [es:esi+0x14],ecx              ;登记TSS基地址到TCB
  1081                                        
  1082                                           ;登记基本的TSS表格内容
  1083 000002DA 2666C7010000                     mov word [es:ecx+0],0              ;反向链=0
  1084                                  
  1085 000002E0 268B5624                         mov edx,[es:esi+0x24]              ;登记0特权级堆栈初始ESP
  1086 000002E4 26895104                         mov [es:ecx+4],edx                 ;到TSS中
  1087                                  
  1088 000002E8 26668B5622                       mov dx,[es:esi+0x22]               ;登记0特权级堆栈段选择子
  1089 000002ED 2666895108                       mov [es:ecx+8],dx                  ;到TSS中
  1090                                  
  1091 000002F2 268B5632                         mov edx,[es:esi+0x32]              ;登记1特权级堆栈初始ESP
  1092 000002F6 2689510C                         mov [es:ecx+12],edx                ;到TSS中
  1093                                  
  1094 000002FA 26668B5630                       mov dx,[es:esi+0x30]               ;登记1特权级堆栈段选择子
  1095 000002FF 2666895110                       mov [es:ecx+16],dx                 ;到TSS中
  1096                                  
  1097 00000304 268B5640                         mov edx,[es:esi+0x40]              ;登记2特权级堆栈初始ESP
  1098 00000308 26895114                         mov [es:ecx+20],edx                ;到TSS中
  1099                                  
  1100 0000030C 26668B563E                       mov dx,[es:esi+0x3e]               ;登记2特权级堆栈段选择子
  1101 00000311 2666895118                       mov [es:ecx+24],dx                 ;到TSS中
  1102                                  
  1103 00000316 26668B5610                       mov dx,[es:esi+0x10]               ;登记任务的LDT选择子
  1104 0000031B 2666895160                       mov [es:ecx+96],dx                 ;到TSS中
  1105                                  
  1106 00000320 26668B5612                       mov dx,[es:esi+0x12]               ;登记任务的I/O位图偏移
  1107 00000325 2666895166                       mov [es:ecx+102],dx                ;到TSS中
  1108                                  
  1109 0000032A 2666C741640000                   mov word [es:ecx+100],0            ;T=0
  1110                                  
  1111                                           ;访问用户程序头部，获取数据填充TSS 
  1112 00000331 8B5D2C                           mov ebx,[ebp+11*4]                 ;从堆栈中取得TCB的基地址
  1113 00000334 268B7B06                         mov edi,[es:ebx+0x06]              ;用户程序加载的基地址 
  1114                                  
  1115 00000338 268B5708                         mov edx,[es:edi+0x08]              ;登记程序入口点（EIP）
  1116 0000033C 26895120                         mov [es:ecx+32],edx                ;到TSS
  1117                                  
  1118 00000340 26668B570C                       mov dx,[es:edi+0x0c]               ;登记程序代码段（CS）选择子
  1119 00000345 266689514C                       mov [es:ecx+76],dx                 ;到TSS中
  1120                                  
  1121 0000034A 26668B571C                       mov dx,[es:edi+0x1c]               ;登记程序堆栈段（SS）选择子
  1122 0000034F 2666895150                       mov [es:ecx+80],dx                 ;到TSS中
  1123                                  
  1124 00000354 268B5720                         mov edx,[es:edi+0x20]              ;堆栈的高端线性地址
  1125 00000358 26895138                         mov [es:ecx+56],edx                ;填写TSS的ESP域
  1126                                  
  1127 0000035C 26668B5704                       mov dx,[es:edi+0x04]               ;登记程序数据段（DS）选择子
  1128 00000361 2666895154                       mov word [es:ecx+84],dx            ;到TSS中。注意，它指向程序头部段
  1129                                        
  1130 00000366 2666C741480000                   mov word [es:ecx+72],0             ;TSS中的ES=0
  1131                                  
  1132 0000036D 2666C741580000                   mov word [es:ecx+88],0             ;TSS中的FS=0
  1133                                  
  1134 00000374 2666C7415C0000                   mov word [es:ecx+92],0             ;TSS中的GS=0
  1135                                  
  1136 0000037B 9C                               pushfd
  1137 0000037C 268F4124                         pop dword [es:ecx+36]              ;EFLAGS
  1138                                  
  1139                                           ;在GDT中登记TSS描述符
  1140 00000380 268B4614                         mov eax,[es:esi+0x14]              ;TSS的起始线性地址
  1141 00000384 260FB75E12                       movzx ebx,word [es:esi+0x12]       ;段长度（界限）
  1142 00000389 B900890000                       mov ecx,0x00008900                 ;TSS描述符，特权级0
  1143 0000038E 9A[E5020000]2800                 call sys_routine_seg_sel:make_seg_descriptor
  1144 00000395 9A[89020000]2800                 call sys_routine_seg_sel:set_up_gdt_descriptor
  1145 0000039C 2666894E18                       mov [es:esi+0x18],cx               ;登记TSS选择子到TCB
  1146                                  
  1147                                           ;创建用户任务的页目录
  1148                                           ;注意！页的分配和使用是由页位图决定的，可以不占用线性地址空间
  1149 000003A1 9A[D6010000]2800                 call sys_routine_seg_sel:create_copy_cur_pdir
  1150 000003A8 268B5E14                         mov ebx,[es:esi+0x14]              ;从TCB中获取TSS的线性地址
  1151 000003AC 2689431C                         mov dword [es:ebx+28],eax          ;填写TSS的CR3(PDBR)域
  1152                                  
  1153 000003B0 07                               pop es                             ;恢复到调用此过程前的es段 
  1154 000003B1 1F                               pop ds                             ;恢复到调用此过程前的ds段
  1155                                        
  1156 000003B2 61                               popad
  1157                                        
  1158 000003B3 C20800                           ret 8                              ;丢弃调用本过程前压入的参数 
  1159                                        
  1160                                  ;-------------------------------------------------------------------------------
  1161                                  append_to_tcb_link:                         ;在TCB链上追加任务控制块
  1162                                                                              ;输入：ECX=TCB线性基地址
  1163 000003B6 50                               push eax
  1164 000003B7 52                               push edx
  1165 000003B8 1E                               push ds
  1166 000003B9 06                               push es
  1167                                  
  1168 000003BA FA                               cli
  1169                                  
  1170 000003BB B830000000                       mov eax,core_data_seg_sel          ;令DS指向内核数据段 
  1171 000003C0 8ED8                             mov ds,eax
  1172 000003C2 B808000000                       mov eax,mem_0_4_gb_seg_sel         ;令ES指向0..4GB段
  1173 000003C7 8EC0                             mov es,eax
  1174                                           
  1175 000003C9 26C70100000000                   mov dword [es: ecx+0x00],0         ;当前TCB指针域清零，以指示这是最
  1176                                                                              ;后一个TCB
  1177                                                                               
  1178 000003D0 A1[B30F0000]                     mov eax,[tcb_chain]                ;TCB表头指针
  1179 000003D5 09C0                             or eax,eax                         ;链表为空？
  1180 000003D7 740E                             jz .notcb 
  1181                                           
  1182                                    .searc:
  1183 000003D9 89C2                             mov edx,eax
  1184 000003DB 268B02                           mov eax,[es: edx+0x00]
  1185 000003DE 09C0                             or eax,eax               
  1186 000003E0 75F7                             jnz .searc
  1187                                  
  1188 000003E2 26890A                           mov [es: edx+0x00],ecx
  1189 000003E5 EB06                             jmp .retpc
  1190                                           
  1191                                    .notcb:       
  1192 000003E7 890D[B30F0000]                   mov [tcb_chain],ecx                ;若为空表，直接令表头指针指向TCB
  1193                                           
  1194                                    .retpc:
  1195 000003ED FB                               sti
  1196                                  
  1197 000003EE 07                               pop es
  1198 000003EF 1F                               pop ds
  1199 000003F0 5A                               pop edx
  1200 000003F1 58                               pop eax
  1201                                           
  1202 000003F2 C3                               ret
  1203                                           
  1204                                  ;-------------------------------------------------------------------------------
  1205                                  start:
  1206 000003F3 B930000000                       mov ecx,core_data_seg_sel          ;令DS指向核心数据段 
  1207 000003F8 8ED9                             mov ds,ecx
  1208                                  
  1209 000003FA B908000000                       mov ecx,mem_0_4_gb_seg_sel         ;令ES指向4GB数据段 
  1210 000003FF 8EC1                             mov es,ecx
  1211                                  
  1212                                           ;创建中断描述符表IDT
  1213                                           ;注意！在此期间，不得开放中断，也不得调用put_string例程！
  1214                                  
  1215                                           ;前20个向量是处理器异常使用的
  1216 00000401 B8[C7030000]                     mov eax,general_exception_handler  ;门代码在段内偏移地址
  1217 00000406 66BB2800                         mov bx,sys_routine_seg_sel         ;门代码所在段的选择子
  1218 0000040A 66B9008E                         mov cx,0x8e00                      ;32位中断门，0特权级
  1219 0000040E 9A[00030000]2800                 call sys_routine_seg_sel:make_gate_descriptor
  1220                                  
  1221 00000415 BB00F00100                       mov ebx,idt_linear_address         ;中断描述符表的线性地址
  1222 0000041A 31F6                             xor esi,esi
  1223                                    .idt0:
  1224 0000041C 268904F3                         mov [es:ebx+esi*8],eax
  1225 00000420 268954F304                       mov [es:ebx+esi*8+4],edx
  1226 00000425 46                               inc esi
  1227 00000426 83FE13                           cmp esi,19                         ;安装前20个异常中断处理过程
  1228 00000429 7EF1                             jle .idt0
  1229                                  
  1230                                           ;其余为保留或硬件使用的中断向量
  1231 0000042B B8[BE030000]                     mov eax,general_interrupt_handler  ;门代码在段内偏移地址
  1232 00000430 66BB2800                         mov bx,sys_routine_seg_sel         ;门代码所在段的选择子
  1233 00000434 66B9008E                         mov cx,0x8e00                      ;32位中断门，0特权级
  1234 00000438 9A[00030000]2800                 call sys_routine_seg_sel:make_gate_descriptor
  1235                                  
  1236 0000043F BB00F00100                       mov ebx,idt_linear_address         ;中断描述符表的线性地址
  1237                                    .idt1:
  1238 00000444 268904F3                         mov [es:ebx+esi*8],eax
  1239 00000448 268954F304                       mov [es:ebx+esi*8+4],edx
  1240 0000044D 46                               inc esi
  1241 0000044E 81FEFF000000                     cmp esi,255                        ;安装普通的中断处理过程
  1242 00000454 7EEE                             jle .idt1
  1243                                  
  1244                                           ;设置实时时钟中断处理过程
  1245 00000456 B8[D5030000]                     mov eax,rtm_0x70_interrupt_handle  ;门代码在段内偏移地址
  1246 0000045B 66BB2800                         mov bx,sys_routine_seg_sel         ;门代码所在段的选择子
  1247 0000045F 66B9008E                         mov cx,0x8e00                      ;32位中断门，0特权级
  1248 00000463 9A[00030000]2800                 call sys_routine_seg_sel:make_gate_descriptor
  1249                                  
  1250 0000046A BB00F00100                       mov ebx,idt_linear_address         ;中断描述符表的线性地址
  1251 0000046F 26898380030000                   mov [es:ebx+0x70*8],eax
  1252 00000476 26899384030000                   mov [es:ebx+0x70*8+4],edx
  1253                                  
  1254                                           ;准备开放中断
  1255 0000047D 66C705[06000000]FF-              mov word [pidt],256*8-1            ;IDT的界限
  1255 00000485 07                 
  1256 00000486 C705[08000000]00F0-              mov dword [pidt+2],idt_linear_address
  1256 0000048E 0100               
  1257 00000490 0F011D[06000000]                 lidt [pidt]                        ;加载中断描述符表寄存器IDTR
  1258                                  
  1259                                           ;设置8259A中断控制器
  1260 00000497 B011                             mov al,0x11
  1261 00000499 E620                             out 0x20,al                        ;ICW1：边沿触发/级联方式
  1262 0000049B B020                             mov al,0x20
  1263 0000049D E621                             out 0x21,al                        ;ICW2:起始中断向量
  1264 0000049F B004                             mov al,0x04
  1265 000004A1 E621                             out 0x21,al                        ;ICW3:从片级联到IR2
  1266 000004A3 B001                             mov al,0x01
  1267 000004A5 E621                             out 0x21,al                        ;ICW4:非总线缓冲，全嵌套，正常EOI
  1268                                  
  1269 000004A7 B011                             mov al,0x11
  1270 000004A9 E6A0                             out 0xa0,al                        ;ICW1：边沿触发/级联方式
  1271 000004AB B070                             mov al,0x70
  1272 000004AD E6A1                             out 0xa1,al                        ;ICW2:起始中断向量
  1273 000004AF B004                             mov al,0x04
  1274 000004B1 E6A1                             out 0xa1,al                        ;ICW3:从片级联到IR2
  1275 000004B3 B001                             mov al,0x01
  1276 000004B5 E6A1                             out 0xa1,al                        ;ICW4:非总线缓冲，全嵌套，正常EOI
  1277                                  
  1278                                           ;设置和时钟中断相关的硬件
  1279 000004B7 B00B                             mov al,0x0b                        ;RTC寄存器B
  1280 000004B9 0C80                             or al,0x80                         ;阻断NMI
  1281 000004BB E670                             out 0x70,al
  1282 000004BD B012                             mov al,0x12                        ;设置寄存器B，禁止周期性中断，开放更
  1283 000004BF E671                             out 0x71,al                        ;新结束后中断，BCD码，24小时制
  1284                                  
  1285 000004C1 E4A1                             in al,0xa1                         ;读8259从片的IMR寄存器
  1286 000004C3 24FE                             and al,0xfe                        ;清除bit 0(此位连接RTC)
  1287 000004C5 E6A1                             out 0xa1,al                        ;写回此寄存器
  1288                                  
  1289 000004C7 B00C                             mov al,0x0c
  1290 000004C9 E670                             out 0x70,al
  1291 000004CB E471                             in al,0x71                         ;读RTC寄存器C，复位未决的中断状态
  1292                                  
  1293 000004CD FB                               sti                                ;开放硬件中断
  1294                                  
  1295 000004CE BB[70060000]                     mov ebx,message_0
  1296 000004D3 9A[00000000]2800                 call sys_routine_seg_sel:put_string
  1297                                  
  1298                                           ;显示处理器品牌信息
  1299 000004DA B802000080                       mov eax,0x80000002
  1300 000004DF 0FA2                             cpuid
  1301 000004E1 A3[AF060000]                     mov [cpu_brand + 0x00],eax
  1302 000004E6 891D[B3060000]                   mov [cpu_brand + 0x04],ebx
  1303 000004EC 890D[B7060000]                   mov [cpu_brand + 0x08],ecx
  1304 000004F2 8915[BB060000]                   mov [cpu_brand + 0x0c],edx
  1305                                  
  1306 000004F8 B803000080                       mov eax,0x80000003
  1307 000004FD 0FA2                             cpuid
  1308 000004FF A3[BF060000]                     mov [cpu_brand + 0x10],eax
  1309 00000504 891D[C3060000]                   mov [cpu_brand + 0x14],ebx
  1310 0000050A 890D[C7060000]                   mov [cpu_brand + 0x18],ecx
  1311 00000510 8915[CB060000]                   mov [cpu_brand + 0x1c],edx
  1312                                  
  1313 00000516 B804000080                       mov eax,0x80000004
  1314 0000051B 0FA2                             cpuid
  1315 0000051D A3[CF060000]                     mov [cpu_brand + 0x20],eax
  1316 00000522 891D[D3060000]                   mov [cpu_brand + 0x24],ebx
  1317 00000528 890D[D7060000]                   mov [cpu_brand + 0x28],ecx
  1318 0000052E 8915[DB060000]                   mov [cpu_brand + 0x2c],edx
  1319                                  
  1320 00000534 BB[AA060000]                     mov ebx,cpu_brnd0                  ;显示处理器品牌信息
  1321 00000539 9A[00000000]2800                 call sys_routine_seg_sel:put_string
  1322 00000540 BB[AF060000]                     mov ebx,cpu_brand
  1323 00000545 9A[00000000]2800                 call sys_routine_seg_sel:put_string
  1324 0000054C BB[E3060000]                     mov ebx,cpu_brnd1
  1325 00000551 9A[00000000]2800                 call sys_routine_seg_sel:put_string
  1326                                  
  1327                                           ;准备打开分页机制
  1328                                  
  1329                                           ;创建系统内核的页目录表PDT
  1330                                           ;页目录表清零
  1331 00000558 B900040000                       mov ecx,1024                       ;1024个目录项
  1332 0000055D BB00000200                       mov ebx,0x00020000                 ;页目录的物理地址
  1333 00000562 31F6                             xor esi,esi
  1334                                    .b1:
  1335 00000564 26C7043300000000                 mov dword [es:ebx+esi],0x00000000  ;页目录表项清零
  1336 0000056C 83C604                           add esi,4
  1337 0000056F E2F3                             loop .b1
  1338                                  
  1339                                           ;在页目录内创建指向页目录自己的目录项
  1340 00000571 26C783FC0F00000300-              mov dword [es:ebx+4092],0x00020003
  1340 0000057A 0200               
  1341                                  
  1342                                           ;在页目录内创建与线性地址0x00000000对应的目录项
  1343 0000057C 26C70303100200                   mov dword [es:ebx+0],0x00021003    ;写入目录项（页表的物理地址和属性）
  1344                                  
  1345                                           ;创建与上面那个目录项相对应的页表，初始化页表项
  1346 00000583 BB00100200                       mov ebx,0x00021000                 ;页表的物理地址
  1347 00000588 31C0                             xor eax,eax                        ;起始页的物理地址
  1348 0000058A 31F6                             xor esi,esi
  1349                                    .b2:
  1350 0000058C 89C2                             mov edx,eax
  1351 0000058E 83CA03                           or edx,0x00000003
  1352 00000591 268914B3                         mov [es:ebx+esi*4],edx             ;登记页的物理地址
  1353 00000595 0500100000                       add eax,0x1000                     ;下一个相邻页的物理地址
  1354 0000059A 46                               inc esi
  1355 0000059B 81FE00010000                     cmp esi,256                        ;仅低端1MB内存对应的页才是有效的
  1356 000005A1 7CE9                             jl .b2
  1357                                  
  1358                                    .b3:                                      ;其余的页表项置为无效
  1359 000005A3 26C704B300000000                 mov dword [es:ebx+esi*4],0x00000000
  1360 000005AB 46                               inc esi
  1361 000005AC 81FE00040000                     cmp esi,1024
  1362 000005B2 7CEF                             jl .b3
  1363                                  
  1364                                           ;令CR3寄存器指向页目录，并正式开启页功能
  1365 000005B4 B800000200                       mov eax,0x00020000                 ;PCD=PWT=0
  1366 000005B9 0F22D8                           mov cr3,eax
  1367                                  
  1368 000005BC FA                               cli
  1369                                  
  1370 000005BD 0F20C0                           mov eax,cr0
  1371 000005C0 0D00000080                       or eax,0x80000000
  1372 000005C5 0F22C0                           mov cr0,eax                        ;开启分页机制
  1373                                  
  1374                                           ;在页目录内创建与线性地址0x80000000对应的目录项
  1375                                           ;mov ebx,0xfffff000                 ;页目录自己的线性地址
  1376                                           ;mov esi,0x80000000                 ;映射的起始地址
  1377                                           ;shr esi,22                         ;线性地址的高10位是目录索引
  1378                                           ;shl esi,2
  1379                                           ;mov dword [es:ebx+esi],0x00021003  ;写入目录项（页表的物理地址和属性）
  1380                                                                              ;目标单元的线性地址为0xFFFFF200
  1381 000005C8 26C70500F8FFFF0310-              mov dword [es:0xfffff800], 0x00021003
  1381 000005D1 0200               
  1382                                  
  1383                                           ;将GDT中的段描述符映射到线性地址0x80000000
  1384 000005D3 0F0105[00000000]                 sgdt [pgdt]
  1385                                  
  1386 000005DA 8B1D[02000000]                   mov ebx,[pgdt+2]
  1387                                  
  1388 000005E0 26814B1400000080                 or dword [es:ebx+0x10+4],0x80000000;处理保护模式下初始代码段描述符
  1389 000005E8 26814B1C00000080                 or dword [es:ebx+0x18+4],0x80000000;处理内核的栈段描述符
  1390 000005F0 26814B2400000080                 or dword [es:ebx+0x20+4],0x80000000;处理显示缓冲区描述符
  1391 000005F8 26814B2C00000080                 or dword [es:ebx+0x28+4],0x80000000;处理公共例程段描述符
  1392 00000600 26814B3400000080                 or dword [es:ebx+0x30+4],0x80000000;处理内核数据段描述符
  1393 00000608 26814B3C00000080                 or dword [es:ebx+0x38+4],0x80000000;处理内核代码段描述符
  1394                                  
  1395 00000610 8105[02000000]0000-              add dword [pgdt+2],0x80000000      ;GDTR也用的是线性地址
  1395 00000618 0080               
  1396                                  
  1397 0000061A 0F0115[00000000]                 lgdt [pgdt]
  1398                                  
  1399                                           ;修改IDTR，将中断描述符表映射到线性地址高端
  1400 00000621 0F010D[06000000]                 sidt [pidt]
  1401 00000628 8105[08000000]0000-              add dword [pidt+2],0x80000000      ;IDTR也用的是线性地址
  1401 00000630 0080               
  1402 00000632 0F011D[06000000]                 lidt [pidt]
  1403                                  
  1404 00000639 EA[40060000]3800                 jmp core_code_seg_sel:flush        ;刷新段寄存器CS，启用高端线性地址
  1405                                  
  1406                                     flush:
  1407 00000640 B818000000                       mov eax,core_stack_seg_sel
  1408 00000645 8ED0                             mov ss,eax
  1409                                  
  1410 00000647 B830000000                       mov eax,core_data_seg_sel
  1411 0000064C 8ED8                             mov ds,eax
  1412                                  
  1413 0000064E FB                               sti
  1414                                  
  1415 0000064F BB[E8060000]                     mov ebx,message_1
  1416 00000654 9A[00000000]2800                 call sys_routine_seg_sel:put_string
  1417                                  
  1418                                  
  1419                                           ;以下开始安装为整个系统服务的调用门。特权级之间的控制转移必须使用门
  1420 0000065B BF[4C000000]                     mov edi,salt                       ;C-SALT表的起始位置 
  1421 00000660 B906000000                       mov ecx,salt_items                 ;C-SALT表的条目数量 
  1422                                    .g0:
  1423 00000665 51                               push ecx   
  1424 00000666 8B8700010000                     mov eax,[edi+256]                  ;该条目入口点的32位偏移地址 
  1425 0000066C 668B9F04010000                   mov bx,[edi+260]                   ;该条目入口点的段选择子 
  1426 00000673 66B900EC                         mov cx,1_11_0_1100_000_00000B      ;特权级3的调用门(3以上的特权级才
  1427                                                                              ;允许访问)，0个参数(因为用寄存器
  1428                                                                              ;传递参数，而没有用栈) 
  1429 00000677 9A[00030000]2800                 call sys_routine_seg_sel:make_gate_descriptor
  1430 0000067E 9A[89020000]2800                 call sys_routine_seg_sel:set_up_gdt_descriptor
  1431 00000685 66898F04010000                   mov [edi+260],cx                   ;将返回的门描述符选择子回填
  1432 0000068C 81C706010000                     add edi,salt_item_len              ;指向下一个C-SALT条目 
  1433 00000692 59                               pop ecx
  1434 00000693 E2D0                             loop .g0
  1435                                  
  1436                                           ;对门进行测试 
  1437 00000695 BB[32070000]                     mov ebx,message_2
  1438 0000069A FF1D[4C010000]                   call far [salt_1+256]              ;通过门显示信息(偏移量将被忽略) 
  1439                                  
  1440                                           ;开始创建和确立内核任务
  1441 000006A0 B900F80180                       mov ecx,core_lin_tcb_addr          ;移至高端之后的内核任务TCB线性地址
  1442 000006A5 2666C74104FFFF                   mov word [es:ecx+0x04],0xffff      ;任务的状态为“忙”
  1443 000006AC 26C7414600001080                 mov dword [es:ecx+0x46],core_lin_alloc_at
  1444                                                                              ;登记内核中可用于分配的起始线性地址
  1445 000006B4 E8FDFCFFFF                       call append_to_tcb_link            ;将内核任务的TCB添加到TCB链中
  1446                                  
  1447 000006B9 89CE                             mov esi,ecx
  1448                                  
  1449                                           ;为内核任务的TSS分配内存空间。所有TSS必须创建在内核空间
  1450 000006BB B968000000                       mov ecx,104                        ;为该任务的TSS分配内存
  1451 000006C0 9A[5B020000]2800                 call sys_routine_seg_sel:allocate_memory
  1452 000006C7 26894E14                         mov [es:esi+0x14],ecx              ;在内核TCB中保存TSS基地址
  1453                                  
  1454                                           ;在程序管理器的TSS中设置必要的项目
  1455 000006CB 2666C7010000                     mov word [es:ecx+0],0              ;反向链=0
  1456 000006D1 0F20D8                           mov eax,cr3
  1457 000006D4 2689411C                         mov dword [es:ecx+28],eax          ;登记CR3(PDBR)
  1458 000006D8 2666C741600000                   mov word [es:ecx+96],0             ;没有LDT。处理器允许没有LDT的任务。
  1459 000006DF 2666C741640000                   mov word [es:ecx+100],0            ;T=0
  1460 000006E6 2666C741666700                   mov word [es:ecx+102],103          ;没有I/O位图。0特权级事实上不需要。
  1461                                                                              ;不需要0、1、2特权级堆栈。0特级不
  1462                                                                              ;会向低特权级转移控制。
  1463                                           
  1464                                           ;创建TSS描述符，并安装到GDT中 
  1465 000006ED 89C8                             mov eax,ecx                        ;TSS的起始线性地址
  1466 000006EF BB67000000                       mov ebx,103                        ;段长度（界限）
  1467 000006F4 B900890000                       mov ecx,0x00008900                 ;TSS描述符，特权级0
  1468 000006F9 9A[E5020000]2800                 call sys_routine_seg_sel:make_seg_descriptor
  1469 00000700 9A[89020000]2800                 call sys_routine_seg_sel:set_up_gdt_descriptor
  1470 00000707 2666894E18                       mov word [es:esi+0x18],cx          ;登记TSS选择子到TCB
  1471                                  
  1472                                           ;任务寄存器TR中的内容是任务存在的标志，该内容也决定了当前任务是谁。
  1473                                           ;下面的指令为当前正在执行的0特权级任务“程序管理器”后补手续（TSS）。
  1474 0000070C 0F00D9                           ltr cx
  1475                                  
  1476                                           ;现在可认为“程序管理器”任务正执行中
  1477 0000070F BB[B70F0000]                     mov ebx,core_msg1
  1478 00000714 9A[00000000]2800                 call sys_routine_seg_sel:put_string
  1479                                  
  1480                                           ;以下开始创建用户任务
  1481 0000071B B94A000000                       mov ecx,0x4a
  1482 00000720 9A[5B020000]2800                 call sys_routine_seg_sel:allocate_memory
  1483 00000727 2666C741040000                   mov word [es:ecx+0x04],0           ;任务状态：就绪
  1484 0000072E 26C7414600000000                 mov dword [es:ecx+0x46],0          ;任务内可用于分配的初始线性地址
  1485                                  
  1486 00000736 6A32                             push dword 50                      ;用户程序位于逻辑50扇区
  1487 00000738 51                               push ecx                           ;压入任务控制块起始线性地址 
  1488 00000739 E806F9FFFF                       call load_relocate_program
  1489 0000073E E873FCFFFF                       call append_to_tcb_link            ;将此TCB添加到TCB链中
  1490                                  
  1491                                           ;可以创建更多的任务，例如：
  1492 00000743 B94A000000                       mov ecx,0x4a
  1493 00000748 9A[5B020000]2800                 call sys_routine_seg_sel:allocate_memory
  1494 0000074F 2666C741040000                   mov word [es:ecx+0x04],0           ;任务状态：空闲
  1495 00000756 26C7414600000000                 mov dword [es:ecx+0x46],0          ;任务内可用于分配的初始线性地址
  1496                                  
  1497 0000075E 6A64                             push dword 100                     ;用户程序位于逻辑100扇区
  1498 00000760 51                               push ecx                           ;压入任务控制块起始线性地址
  1499                                  
  1500 00000761 E8DEF8FFFF                       call load_relocate_program
  1501 00000766 E84BFCFFFF                       call append_to_tcb_link            ;将此TCB添加到TCB链中
  1502                                  
  1503                                    .do_switch:
  1504 0000076B BB[CE0F0000]                     mov ebx,core_msg2
  1505 00000770 9A[00000000]2800                 call sys_routine_seg_sel:put_string
  1506                                  
  1507                                           ;清理已经终止的任务，并回收它们占用的资源
  1508 00000777 9A[EB030000]2800                 call sys_routine_seg_sel:do_task_clean
  1509                                  
  1510 0000077E F4                               hlt
  1511                                  
  1512 0000077F EBEA                             jmp .do_switch
  1513                                  
  1514                                  core_code_end:
  1515                                  
  1516                                  ;-------------------------------------------------------------------------------
  1517                                  SECTION core_trail
  1518                                  ;-------------------------------------------------------------------------------
  1519                                  core_end:
