     1                                           ;代码清单17-1
     2                                           ;文件名：c17_core.asm
     3                                           ;文件说明：保护模式微型核心程序 
     4                                           ;创建日期：2011-11-19 21:40
     5                                  
     6                                           ;以下常量定义部分。内核的大部分内容都应当固定 
     7                                           core_code_seg_sel     equ  0x38    ;内核代码段选择子
     8                                           core_data_seg_sel     equ  0x30    ;内核数据段选择子 
     9                                           sys_routine_seg_sel   equ  0x28    ;系统公共例程代码段的选择子 
    10                                           video_ram_seg_sel     equ  0x20    ;视频显示缓冲区的段选择子
    11                                           core_stack_seg_sel    equ  0x18    ;内核堆栈段选择子
    12                                           mem_0_4_gb_seg_sel    equ  0x08    ;整个0-4GB内存的段的选择子
    13                                  
    14                                  ;-------------------------------------------------------------------------------
    15                                           ;以下是系统核心的头部，用于加载核心程序 
    16 00000000 [00000000]                       core_length      dd core_end       ;核心程序总长度#00
    17                                  
    18 00000004 [00000000]                       sys_routine_seg  dd section.sys_routine.start
    19                                                                              ;系统公用例程段位置#04
    20                                  
    21 00000008 [00000000]                       core_data_seg    dd section.core_data.start
    22                                                                              ;核心数据段位置#08
    23                                  
    24 0000000C [00000000]                       core_code_seg    dd section.core_code.start
    25                                                                              ;核心代码段位置#0c
    26                                  
    27                                  
    28 00000010 [BA030000]                       core_entry       dd start          ;核心代码段入口点#10
    29 00000014 3800                                              dw core_code_seg_sel
    30                                  
    31                                  ;===============================================================================
    32                                           [bits 32]
    33                                  ;===============================================================================
    34                                  SECTION sys_routine vstart=0                ;系统公共例程代码段 
    35                                  ;-------------------------------------------------------------------------------
    36                                           ;字符串显示例程
    37                                  put_string:                                 ;显示0终止的字符串并移动光标 
    38                                                                              ;输入：DS:EBX=串地址
    39 00000000 51                               push ecx
    40                                    .getc:
    41 00000001 8A0B                             mov cl,[ebx]
    42 00000003 08C9                             or cl,cl
    43 00000005 7408                             jz .exit
    44 00000007 E805000000                       call put_char
    45 0000000C 43                               inc ebx
    46 0000000D EBF2                             jmp .getc
    47                                  
    48                                    .exit:
    49 0000000F 59                               pop ecx
    50 00000010 CB                               retf                               ;段间返回
    51                                  
    52                                  ;-------------------------------------------------------------------------------
    53                                  put_char:                                   ;在当前光标处显示一个字符,并推进
    54                                                                              ;光标。仅用于段内调用
    55                                                                              ;输入：CL=字符ASCII码
    56 00000011 60                               pushad
    57                                  
    58                                           ;以下取当前光标位置
    59 00000012 66BAD403                         mov dx,0x3d4
    60 00000016 B00E                             mov al,0x0e
    61 00000018 EE                               out dx,al
    62 00000019 6642                             inc dx                             ;0x3d5
    63 0000001B EC                               in al,dx                           ;高字
    64 0000001C 88C4                             mov ah,al
    65                                  
    66 0000001E 664A                             dec dx                             ;0x3d4
    67 00000020 B00F                             mov al,0x0f
    68 00000022 EE                               out dx,al
    69 00000023 6642                             inc dx                             ;0x3d5
    70 00000025 EC                               in al,dx                           ;低字
    71 00000026 6689C3                           mov bx,ax                          ;BX=代表光标位置的16位数
    72                                  
    73 00000029 80F90D                           cmp cl,0x0d                        ;回车符？
    74 0000002C 750E                             jnz .put_0a
    75 0000002E 6689D8                           mov ax,bx
    76 00000031 B350                             mov bl,80
    77 00000033 F6F3                             div bl
    78 00000035 F6E3                             mul bl
    79 00000037 6689C3                           mov bx,ax
    80 0000003A EB65                             jmp .set_cursor
    81                                  
    82                                    .put_0a:
    83 0000003C 80F90A                           cmp cl,0x0a                        ;换行符？
    84 0000003F 7506                             jnz .put_other
    85 00000041 6683C350                         add bx,80
    86 00000045 EB15                             jmp .roll_screen
    87                                  
    88                                    .put_other:                               ;正常显示字符
    89 00000047 06                               push es
    90 00000048 B820000000                       mov eax,video_ram_seg_sel          ;0xb8000段的选择子
    91 0000004D 8EC0                             mov es,eax
    92 0000004F 66D1E3                           shl bx,1
    93 00000052 2667880F                         mov [es:bx],cl
    94 00000056 07                               pop es
    95                                  
    96                                           ;以下将光标位置推进一个字符
    97 00000057 66D1EB                           shr bx,1
    98 0000005A 6643                             inc bx
    99                                  
   100                                    .roll_screen:
   101 0000005C 6681FBD007                       cmp bx,2000                        ;光标超出屏幕？滚屏
   102 00000061 7C3E                             jl .set_cursor
   103                                  
   104 00000063 6653                             push bx                            ;为了修改原书程序的逻辑问题，新增
   105 00000065 1E                               push ds
   106 00000066 06                               push es
   107 00000067 B820000000                       mov eax,video_ram_seg_sel
   108 0000006C 8ED8                             mov ds,eax
   109 0000006E 8EC0                             mov es,eax
   110 00000070 FC                               cld
   111 00000071 BEA0000000                       mov esi,0xa0                       ;小心！32位模式下movsb/w/d
   112 00000076 BF00000000                       mov edi,0x00                       ;使用的是esi/edi/ecx
   113 0000007B B980070000                       mov ecx,1920
   114 00000080 F366A5                           rep movsw
   115 00000083 66BB000F                         mov bx,3840                        ;清除屏幕最底一行
   116 00000087 B950000000                       mov ecx,80                         ;32位程序应该使用ECX
   117                                    .cls:
   118 0000008C 266667C7072007                   mov word[es:bx],0x0720
   119 00000093 6683C302                         add bx,2
   120 00000097 E2F3                             loop .cls
   121                                  
   122 00000099 07                               pop es
   123 0000009A 1F                               pop ds
   124                                  
   125                                           ;mov bx,1920                       ;为了修改原书程序的逻辑问题，删除
   126 0000009B 665B                             pop bx                             ;为了修改原书程序的逻辑问题，新增
   127 0000009D 6683EB50                         sub bx,80                          ;为了修改原书程序的逻辑问题，新增
   128                                  
   129                                    .set_cursor:
   130 000000A1 66BAD403                         mov dx,0x3d4
   131 000000A5 B00E                             mov al,0x0e
   132 000000A7 EE                               out dx,al
   133 000000A8 6642                             inc dx                             ;0x3d5
   134 000000AA 88F8                             mov al,bh
   135 000000AC EE                               out dx,al
   136 000000AD 664A                             dec dx                             ;0x3d4
   137 000000AF B00F                             mov al,0x0f
   138 000000B1 EE                               out dx,al
   139 000000B2 6642                             inc dx                             ;0x3d5
   140 000000B4 88D8                             mov al,bl
   141 000000B6 EE                               out dx,al
   142                                  
   143 000000B7 61                               popad
   144 000000B8 C3                               ret
   145                                  
   146                                  ;-------------------------------------------------------------------------------
   147                                  read_hard_disk_0:                           ;从硬盘读取一个逻辑扇区
   148                                                                              ;EAX=逻辑扇区号
   149                                                                              ;DS:EBX=目标缓冲区地址
   150                                                                              ;返回：EBX=EBX+512
   151 000000B9 50                               push eax 
   152 000000BA 51                               push ecx
   153 000000BB 52                               push edx
   154                                        
   155 000000BC 50                               push eax
   156                                           
   157 000000BD 66BAF201                         mov dx,0x1f2
   158 000000C1 B001                             mov al,1
   159 000000C3 EE                               out dx,al                          ;读取的扇区数
   160                                  
   161 000000C4 6642                             inc dx                             ;0x1f3
   162 000000C6 58                               pop eax
   163 000000C7 EE                               out dx,al                          ;LBA地址7~0
   164                                  
   165 000000C8 6642                             inc dx                             ;0x1f4
   166 000000CA B108                             mov cl,8
   167 000000CC D3E8                             shr eax,cl
   168 000000CE EE                               out dx,al                          ;LBA地址15~8
   169                                  
   170 000000CF 6642                             inc dx                             ;0x1f5
   171 000000D1 D3E8                             shr eax,cl
   172 000000D3 EE                               out dx,al                          ;LBA地址23~16
   173                                  
   174 000000D4 6642                             inc dx                             ;0x1f6
   175 000000D6 D3E8                             shr eax,cl
   176 000000D8 0CE0                             or al,0xe0                         ;第一硬盘  LBA地址27~24
   177 000000DA EE                               out dx,al
   178                                  
   179 000000DB 6642                             inc dx                             ;0x1f7
   180 000000DD B020                             mov al,0x20                        ;读命令
   181 000000DF EE                               out dx,al
   182                                  
   183                                    .waits:
   184 000000E0 EC                               in al,dx
   185 000000E1 2488                             and al,0x88
   186 000000E3 3C08                             cmp al,0x08
   187 000000E5 75F9                             jnz .waits                         ;不忙，且硬盘已准备好数据传输 
   188                                  
   189 000000E7 B900010000                       mov ecx,256                        ;总共要读取的字数
   190 000000EC 66BAF001                         mov dx,0x1f0
   191                                    .readw:
   192 000000F0 66ED                             in ax,dx
   193 000000F2 668903                           mov [ebx],ax
   194 000000F5 83C302                           add ebx,2
   195 000000F8 E2F6                             loop .readw
   196                                  
   197 000000FA 5A                               pop edx
   198 000000FB 59                               pop ecx
   199 000000FC 58                               pop eax
   200                                        
   201 000000FD CB                               retf                               ;段间返回 
   202                                  
   203                                  ;-------------------------------------------------------------------------------
   204                                  ;汇编语言程序是极难一次成功，而且调试非常困难。这个例程可以提供帮助 
   205                                  put_hex_dword:                              ;在当前光标处以十六进制形式显示
   206                                                                              ;一个双字并推进光标 
   207                                                                              ;输入：EDX=要转换并显示的数字
   208                                                                              ;输出：无
   209 000000FE 60                               pushad
   210 000000FF 1E                               push ds
   211                                        
   212 00000100 66B83000                         mov ax,core_data_seg_sel           ;切换到核心数据段 
   213 00000104 8ED8                             mov ds,ax
   214                                        
   215 00000106 BB[DB050000]                     mov ebx,bin_hex                    ;指向核心数据段内的转换表
   216 0000010B B908000000                       mov ecx,8
   217                                    .xlt:    
   218 00000110 C1C204                           rol edx,4
   219 00000113 89D0                             mov eax,edx
   220 00000115 83E00F                           and eax,0x0000000f
   221 00000118 D7                               xlat
   222                                        
   223 00000119 51                               push ecx
   224 0000011A 88C1                             mov cl,al                           
   225 0000011C E8F0FEFFFF                       call put_char
   226 00000121 59                               pop ecx
   227                                         
   228 00000122 E2EC                             loop .xlt
   229                                        
   230 00000124 1F                               pop ds
   231 00000125 61                               popad
   232 00000126 CB                               retf
   233                                        
   234                                  ;-------------------------------------------------------------------------------
   235                                  allocate_memory:                            ;分配内存
   236                                                                              ;输入：ECX=希望分配的字节数
   237                                                                              ;输出：ECX=起始线性地址 
   238 00000127 1E                               push ds
   239 00000128 50                               push eax
   240 00000129 53                               push ebx
   241                                        
   242 0000012A B830000000                       mov eax,core_data_seg_sel
   243 0000012F 8ED8                             mov ds,eax
   244                                        
   245 00000131 A1[06000000]                     mov eax,[ram_alloc]
   246 00000136 01C8                             add eax,ecx                        ;下一次分配时的起始地址
   247                                        
   248                                           ;这里应当有检测可用内存数量的指令
   249                                            
   250 00000138 8B0D[06000000]                   mov ecx,[ram_alloc]                ;返回分配的起始地址
   251                                  
   252 0000013E 89C3                             mov ebx,eax
   253 00000140 83E3FC                           and ebx,0xfffffffc
   254 00000143 83C304                           add ebx,4                          ;强制对齐 
   255 00000146 A903000000                       test eax,0x00000003                ;下次分配的起始地址最好是4字节对齐
   256 0000014B 0F45C3                           cmovnz eax,ebx                     ;如果没有对齐，则强制对齐 
   257 0000014E A3[06000000]                     mov [ram_alloc],eax                ;下次从该地址分配内存
   258                                                                              ;cmovcc指令可以避免控制转移 
   259 00000153 5B                               pop ebx
   260 00000154 58                               pop eax
   261 00000155 1F                               pop ds
   262                                  
   263 00000156 CB                               retf
   264                                  
   265                                  ;-------------------------------------------------------------------------------
   266                                  set_up_gdt_descriptor:                      ;在GDT内安装一个新的描述符
   267                                                                              ;输入：EDX:EAX=描述符 
   268                                                                              ;输出：CX=描述符的选择子
   269 00000157 50                               push eax
   270 00000158 53                               push ebx
   271 00000159 52                               push edx
   272                                  
   273 0000015A 1E                               push ds
   274 0000015B 06                               push es
   275                                  
   276 0000015C BB30000000                       mov ebx,core_data_seg_sel          ;切换到核心数据段
   277 00000161 8EDB                             mov ds,ebx
   278                                  
   279 00000163 0F0105[00000000]                 sgdt [pgdt]                        ;以便开始处理GDT
   280                                  
   281 0000016A BB08000000                       mov ebx,mem_0_4_gb_seg_sel
   282 0000016F 8EC3                             mov es,ebx
   283                                  
   284 00000171 0FB71D[00000000]                 movzx ebx,word [pgdt]              ;GDT界限
   285 00000178 6643                             inc bx                             ;GDT总字节数，也是下一个描述符偏移
   286 0000017A 031D[02000000]                   add ebx,[pgdt+2]                   ;下一个描述符的线性地址
   287                                  
   288 00000180 268903                           mov [es:ebx],eax
   289 00000183 26895304                         mov [es:ebx+4],edx
   290                                  
   291 00000187 668305[00000000]08               add word [pgdt],8                  ;增加一个描述符的大小
   292                                  
   293 0000018F 0F0115[00000000]                 lgdt [pgdt]                        ;对GDT的更改生效
   294                                  
   295 00000196 66A1[00000000]                   mov ax,[pgdt]                      ;得到GDT界限值
   296 0000019C 6631D2                           xor dx,dx
   297 0000019F 66BB0800                         mov bx,8
   298 000001A3 66F7F3                           div bx                             ;除以8，去掉余数
   299 000001A6 6689C1                           mov cx,ax
   300 000001A9 66C1E103                         shl cx,3                           ;将索引号移到正确位置
   301                                  
   302 000001AD 07                               pop es
   303 000001AE 1F                               pop ds
   304                                  
   305 000001AF 5A                               pop edx
   306 000001B0 5B                               pop ebx
   307 000001B1 58                               pop eax
   308                                  
   309 000001B2 CB                               retf
   310                                  ;-------------------------------------------------------------------------------
   311                                  make_seg_descriptor:                        ;构造存储器和系统的段描述符
   312                                                                              ;输入：EAX=线性基地址
   313                                                                              ;      EBX=段界限
   314                                                                              ;      ECX=属性。各属性位都在原始
   315                                                                              ;          位置，无关的位清零 
   316                                                                              ;返回：EDX:EAX=描述符
   317 000001B3 89C2                             mov edx,eax
   318 000001B5 C1E010                           shl eax,16
   319 000001B8 6609D8                           or ax,bx                           ;描述符前32位(EAX)构造完毕
   320                                  
   321 000001BB 81E20000FFFF                     and edx,0xffff0000                 ;清除基地址中无关的位
   322 000001C1 C1C208                           rol edx,8
   323 000001C4 0FCA                             bswap edx                          ;装配基址的31~24和23~16  (80486+)
   324                                  
   325 000001C6 6631DB                           xor bx,bx
   326 000001C9 09DA                             or edx,ebx                         ;装配段界限的高4位
   327                                  
   328 000001CB 09CA                             or edx,ecx                         ;装配属性
   329                                  
   330 000001CD CB                               retf
   331                                  
   332                                  ;-------------------------------------------------------------------------------
   333                                  make_gate_descriptor:                       ;构造门的描述符（调用门等）
   334                                                                              ;输入：EAX=门代码在段内偏移地址
   335                                                                              ;       BX=门代码所在段的选择子 
   336                                                                              ;       CX=段类型及属性等（各属
   337                                                                              ;          性位都在原始位置）
   338                                                                              ;返回：EDX:EAX=完整的描述符
   339 000001CE 53                               push ebx
   340 000001CF 51                               push ecx
   341                                        
   342 000001D0 89C2                             mov edx,eax
   343 000001D2 81E20000FFFF                     and edx,0xffff0000                 ;得到偏移地址高16位 
   344 000001D8 6609CA                           or dx,cx                           ;组装属性部分到EDX
   345                                         
   346 000001DB 25FFFF0000                       and eax,0x0000ffff                 ;得到偏移地址低16位 
   347 000001E0 C1E310                           shl ebx,16                          
   348 000001E3 09D8                             or eax,ebx                         ;组装段选择子部分
   349                                        
   350 000001E5 59                               pop ecx
   351 000001E6 5B                               pop ebx
   352                                        
   353 000001E7 CB                               retf                                   
   354                                                               
   355                                  ;-------------------------------------------------------------------------------
   356                                  initiate_task_switch:                       ;主动发起任务切换
   357                                                                              ;输入：无
   358                                                                              ;输出：无。
   359 000001E8 60                               pushad
   360 000001E9 1E                               push ds
   361 000001EA 06                               push es
   362                                  
   363 000001EB B830000000                       mov eax,core_data_seg_sel
   364 000001F0 8EC0                             mov es,eax
   365                                  
   366 000001F2 B808000000                       mov eax,mem_0_4_gb_seg_sel
   367 000001F7 8ED8                             mov ds,eax
   368                                  
   369 000001F9 26A1[290E0000]                   mov eax,[es:tcb_chain]
   370                                  
   371                                           ;搜索状态为忙（当前任务）的节点
   372                                    .b0:
   373 000001FF 66837804FF                       cmp word [eax+0x04],0xffff
   374 00000204 0F44F0                           cmove esi,eax                     ;找到忙的节点，ESI=节点的线性地址
   375 00000207 7404                             jz .b1
   376 00000209 8B00                             mov eax,[eax]
   377 0000020B EBF2                             jmp .b0
   378                                  
   379                                           ;从当前节点继续搜索就绪任务的节点
   380                                    .b1:
   381 0000020D 8B18                             mov ebx,[eax]
   382 0000020F 09DB                             or ebx,ebx
   383 00000211 740E                             jz .b2                            ;到链表尾部也未发现就绪节点，从头找
   384 00000213 66837B0400                       cmp word [ebx+0x04],0x0000
   385 00000218 0F44FB                           cmove edi,ebx                     ;已找到就绪节点，EDI=节点的线性地址
   386 0000021B 741D                             jz .b3
   387 0000021D 89D8                             mov eax,ebx
   388 0000021F EBEC                             jmp .b1
   389                                  
   390                                    .b2:
   391 00000221 268B1D[290E0000]                 mov ebx,[es:tcb_chain]            ;EBX=链表首节点线性地址
   392                                    .b20:
   393 00000228 66837B0400                       cmp word [ebx+0x04],0x0000
   394 0000022D 0F44FB                           cmove edi,ebx                     ;已找到就绪节点，EDI=节点的线性地址
   395 00000230 7408                             jz .b3
   396 00000232 8B1B                             mov ebx,[ebx]
   397 00000234 09DB                             or ebx,ebx
   398 00000236 740D                             jz .return                        ;链表中已经不存在空闲任务，返回
   399 00000238 EBEE                             jmp .b20
   400                                  
   401                                           ;就绪任务的节点已经找到，准备切换到该任务
   402                                    .b3:
   403 0000023A 66F75604                         not word [esi+0x04]               ;将忙状态的节点改为就绪状态的节点
   404 0000023E 66F75704                         not word [edi+0x04]               ;将就绪状态的节点改为忙状态的节点
   405 00000242 FF6F14                           jmp far [edi+0x14]                ;任务切换
   406                                  
   407                                    .return:
   408 00000245 07                               pop es
   409 00000246 1F                               pop ds
   410 00000247 61                               popad
   411                                  
   412 00000248 CB                               retf
   413                                  
   414                                  ;-------------------------------------------------------------------------------
   415                                  terminate_current_task:                     ;终止当前任务
   416                                                                              ;注意，执行此例程时，当前任务仍在
   417                                                                              ;运行中。此例程其实也是当前任务的
   418                                                                              ;一部分 
   419 00000249 B830000000                       mov eax,core_data_seg_sel
   420 0000024E 8EC0                             mov es,eax
   421                                  
   422 00000250 B808000000                       mov eax,mem_0_4_gb_seg_sel
   423 00000255 8ED8                             mov ds,eax
   424                                  
   425 00000257 26A1[290E0000]                   mov eax,[es:tcb_chain]
   426                                                                              ;EAX=首节点的线性地址
   427                                           ;搜索状态为忙（当前任务）的节点
   428                                    .s0:
   429 0000025D 66837804FF                       cmp word [eax+0x04],0xffff
   430 00000262 7404                             jz .s1                             ;找到忙的节点，EAX=节点的线性地址
   431 00000264 8B00                             mov eax,[eax]
   432 00000266 EBF5                             jmp .s0
   433                                  
   434                                           ;将状态为忙的节点改成终止状态
   435                                    .s1:
   436 00000268 66C740043333                     mov word [eax+0x04],0x3333
   437                                  
   438                                           ;搜索就绪状态的任务
   439 0000026E 268B1D[290E0000]                 mov ebx,[es:tcb_chain]            ;EBX=链表首节点线性地址
   440                                    .s2:
   441 00000275 66837B0400                       cmp word [ebx+0x04],0x0000
   442 0000027A 7404                             jz .s3                            ;已找到就绪节点，EBX=节点的线性地址
   443 0000027C 8B1B                             mov ebx,[ebx]
   444 0000027E EBF5                             jmp .s2
   445                                  
   446                                           ;就绪任务的节点已经找到，准备切换到该任务
   447                                    .s3:
   448 00000280 66F75304                         not word [ebx+0x04]               ;将就绪状态的节点改为忙状态的节点
   449 00000284 FF6B14                           jmp far [ebx+0x14]                ;任务切换
   450                                  
   451                                  ;-------------------------------------------------------------------------------
   452                                  do_task_clean:                             ;清理已经终止的任务并回收资源
   453                                  
   454                                           ;搜索TCB链表，找到状态为终止的节点
   455                                           ;将节点从链表中拆除
   456                                           ;回收任务占用的各种资源（可以从它的TCB中找到）
   457                                  
   458 00000287 CB                               retf
   459                                  
   460                                  sys_routine_end:
   461                                  
   462                                  ;===============================================================================
   463                                  SECTION core_data vstart=0                  ;系统核心的数据段 
   464                                  ;------------------------------------------------------------------------------- 
   465 00000000 0000                             pgdt             dw  0             ;用于设置和修改GDT 
   466 00000002 00000000                                          dd  0
   467                                  
   468 00000006 00001000                         ram_alloc        dd  0x00100000    ;下次分配内存时的起始地址
   469                                  
   470                                           ;符号地址检索表
   471                                           salt:
   472 0000000A 405072696E74537472-              salt_1           db  '@PrintString'
   472 00000013 696E67             
   473 00000016 00<rep F4h>                                  times 256-($-salt_1) db 0
   474 0000010A [00000000]                                        dd  put_string
   475 0000010E 2800                                              dw  sys_routine_seg_sel
   476                                  
   477 00000110 40526561644469736B-              salt_2           db  '@ReadDiskData'
   477 00000119 44617461           
   478 0000011D 00<rep F3h>                                  times 256-($-salt_2) db 0
   479 00000210 [B9000000]                                        dd  read_hard_disk_0
   480 00000214 2800                                              dw  sys_routine_seg_sel
   481                                  
   482 00000216 405072696E7444776F-              salt_3           db  '@PrintDwordAsHexString'
   482 0000021F 726441734865785374-
   482 00000228 72696E67           
   483 0000022C 00<rep EAh>                                  times 256-($-salt_3) db 0
   484 00000316 [FE000000]                                        dd  put_hex_dword
   485 0000031A 2800                                              dw  sys_routine_seg_sel
   486                                  
   487 0000031C 405465726D696E6174-              salt_4           db  '@TerminateProgram'
   487 00000325 6550726F6772616D   
   488 0000032D 00<rep EFh>                                  times 256-($-salt_4) db 0
   489 0000041C [49020000]                                        dd  terminate_current_task
   490 00000420 2800                                              dw  sys_routine_seg_sel
   491                                  
   492 00000422 40496E69745461736B-              salt_5           db  '@InitTaskSwitch'
   492 0000042B 537769746368       
   493 00000431 00<rep F1h>                                  times 256-($-salt_5) db 0
   494 00000522 [E8010000]                                        dd  initiate_task_switch
   495 00000526 2800                                              dw  sys_routine_seg_sel
   496                                  
   497                                           salt_item_len   equ $-salt_5
   498                                           salt_items      equ ($-salt)/salt_item_len
   499                                  
   500 00000528 2020496620796F7520-              message_1        db  '  If you seen this message,that means we '
   500 00000531 7365656E2074686973-
   500 0000053A 206D6573736167652C-
   500 00000543 74686174206D65616E-
   500 0000054C 7320776520         
   501 00000551 617265206E6F772069-                               db  'are now in protect mode,and the system '
   501 0000055A 6E2070726F74656374-
   501 00000563 206D6F64652C616E64-
   501 0000056C 207468652073797374-
   501 00000575 656D20             
   502 00000578 636F7265206973206C-                               db  'core is loaded,and the video display '
   502 00000581 6F616465642C616E64-
   502 0000058A 207468652076696465-
   502 00000593 6F20646973706C6179-
   502 0000059C 20                 
   503 0000059D 726F7574696E652077-                               db  'routine works perfectly.',0x0d,0x0a,0
   503 000005A6 6F726B732070657266-
   503 000005AF 6563746C792E0D0A00 
   504                                  
   505 000005B8 202053797374656D20-              message_2        db  '  System wide CALL-GATE mounted.',0x0d,0x0a,0
   505 000005C1 776964652043414C4C-
   505 000005CA 2D47415445206D6F75-
   505 000005D3 6E7465642E0D0A00   
   506                                           
   507 000005DB 303132333435363738-              bin_hex          db '0123456789ABCDEF'
   507 000005E4 39414243444546     
   508                                                                              ;put_hex_dword子过程用的查找表 
   509                                  
   510 000005EB 00<rep 800h>                     core_buf   times 2048 db 0         ;内核用的缓冲区
   511                                  
   512 00000DEB 0D0A202000                       cpu_brnd0        db 0x0d,0x0a,'  ',0
   513 00000DF0 00<rep 34h>                      cpu_brand  times 52 db 0
   514 00000E24 0D0A0D0A00                       cpu_brnd1        db 0x0d,0x0a,0x0d,0x0a,0
   515                                  
   516                                           ;任务控制块链
   517 00000E29 00000000                         tcb_chain        dd  0
   518                                  
   519 00000E2D 0D0A                             core_msg1        db  0x0d,0x0a
   520 00000E2F 5B434F524520544153-                               db  '[CORE TASK]: I am running at CPL=0.Now,create '
   520 00000E38 4B5D3A204920616D20-
   520 00000E41 72756E6E696E672061-
   520 00000E4A 742043504C3D302E4E-
   520 00000E53 6F772C637265617465-
   520 00000E5C 20                 
   521 00000E5D 75736572207461736B-                               db  'user task and switch to it.',0x0d,0x0a,0
   521 00000E66 20616E642073776974-
   521 00000E6F 636820746F2069742E-
   521 00000E78 0D0A00             
   522                                                   
   523 00000E7B 0D0A                             core_msg2        db  0x0d,0x0a
   524 00000E7D 5B434F524520544153-                               db  '[CORE TASK]: I am working!',0x0d,0x0a,0
   524 00000E86 4B5D3A204920616D20-
   524 00000E8F 776F726B696E67210D-
   524 00000E98 0A00               
   525                                  
   526 00000E9A 0D0A                             core_msg3        db  0x0d,0x0a
   527 00000E9C 5B434F524520544153-                               db  '[CORE TASK]: No task to be switched,sleep!'
   527 00000EA5 4B5D3A204E6F207461-
   527 00000EAE 736B20746F20626520-
   527 00000EB7 73776974636865642C-
   527 00000EC0 736C65657021       
   528 00000EC6 0D0A00                                            db  0x0d,0x0a,0
   529                                  
   530                                  core_data_end:
   531                                                 
   532                                  ;===============================================================================
   533                                  SECTION core_code vstart=0
   534                                  ;-------------------------------------------------------------------------------
   535                                  fill_descriptor_in_ldt:                     ;在LDT内安装一个新的描述符
   536                                                                              ;输入：EDX:EAX=描述符
   537                                                                              ;          EBX=TCB基地址
   538                                                                              ;输出：CX=描述符的选择子
   539 00000000 50                               push eax
   540 00000001 52                               push edx
   541 00000002 57                               push edi
   542 00000003 1E                               push ds
   543                                  
   544 00000004 B908000000                       mov ecx,mem_0_4_gb_seg_sel
   545 00000009 8ED9                             mov ds,ecx
   546                                  
   547 0000000B 8B7B0C                           mov edi,[ebx+0x0c]                 ;获得LDT基地址
   548                                           
   549 0000000E 31C9                             xor ecx,ecx
   550 00000010 668B4B0A                         mov cx,[ebx+0x0a]                  ;获得LDT界限
   551 00000014 6641                             inc cx                             ;LDT的总字节数，即新描述符偏移地址
   552                                           
   553 00000016 89040F                           mov [edi+ecx+0x00],eax
   554 00000019 89540F04                         mov [edi+ecx+0x04],edx             ;安装描述符
   555                                  
   556 0000001D 6683C108                         add cx,8                           
   557 00000021 6649                             dec cx                             ;得到新的LDT界限值 
   558                                  
   559 00000023 66894B0A                         mov [ebx+0x0a],cx                  ;更新LDT界限值到TCB
   560                                  
   561 00000027 6689C8                           mov ax,cx
   562 0000002A 6631D2                           xor dx,dx
   563 0000002D 66B90800                         mov cx,8
   564 00000031 66F7F1                           div cx
   565                                           
   566 00000034 6689C1                           mov cx,ax
   567 00000037 66C1E103                         shl cx,3                           ;左移3位，并且
   568 0000003B 6683C904                         or cx,0000_0000_0000_0100B         ;使TI位=1，指向LDT，最后使RPL=00 
   569                                  
   570 0000003F 1F                               pop ds
   571 00000040 5F                               pop edi
   572 00000041 5A                               pop edx
   573 00000042 58                               pop eax
   574                                       
   575 00000043 C3                               ret
   576                                           
   577                                  ;------------------------------------------------------------------------------- 
   578                                  load_relocate_program:                      ;加载并重定位用户程序
   579                                                                              ;输入: PUSH 逻辑扇区号
   580                                                                              ;      PUSH 任务控制块基地址
   581                                                                              ;输出：无 
   582 00000044 60                               pushad
   583                                        
   584 00000045 1E                               push ds
   585 00000046 06                               push es
   586                                        
   587 00000047 89E5                             mov ebp,esp                        ;为访问通过堆栈传递的参数做准备
   588                                        
   589 00000049 B908000000                       mov ecx,mem_0_4_gb_seg_sel
   590 0000004E 8EC1                             mov es,ecx
   591                                        
   592 00000050 8B752C                           mov esi,[ebp+11*4]                 ;从堆栈中取得TCB的基地址
   593                                  
   594                                           ;以下申请创建LDT所需要的内存
   595 00000053 B9A0000000                       mov ecx,160                        ;允许安装20个LDT描述符
   596 00000058 9A[27010000]2800                 call sys_routine_seg_sel:allocate_memory
   597 0000005F 26894E0C                         mov [es:esi+0x0c],ecx              ;登记LDT基地址到TCB中
   598 00000063 2666C7460AFFFF                   mov word [es:esi+0x0a],0xffff      ;登记LDT初始的界限到TCB中 
   599                                  
   600                                           ;以下开始加载用户程序 
   601 0000006A B830000000                       mov eax,core_data_seg_sel
   602 0000006F 8ED8                             mov ds,eax                         ;切换DS到内核数据段
   603                                         
   604 00000071 8B4530                           mov eax,[ebp+12*4]                 ;从堆栈中取出用户程序起始扇区号 
   605 00000074 BB[EB050000]                     mov ebx,core_buf                   ;读取程序头部数据     
   606 00000079 9A[B9000000]2800                 call sys_routine_seg_sel:read_hard_disk_0
   607                                  
   608                                           ;以下判断整个程序有多大
   609 00000080 A1[EB050000]                     mov eax,[core_buf]                 ;程序尺寸
   610 00000085 89C3                             mov ebx,eax
   611 00000087 81E300FEFFFF                     and ebx,0xfffffe00                 ;使之512字节对齐（能被512整除的数低 
   612 0000008D 81C300020000                     add ebx,512                        ;9位都为0 
   613 00000093 A9FF010000                       test eax,0x000001ff                ;程序的大小正好是512的倍数吗? 
   614 00000098 0F45C3                           cmovnz eax,ebx                     ;不是。使用凑整的结果
   615                                        
   616 0000009B 89C1                             mov ecx,eax                        ;实际需要申请的内存数量
   617 0000009D 9A[27010000]2800                 call sys_routine_seg_sel:allocate_memory
   618 000000A4 26894E06                         mov [es:esi+0x06],ecx              ;登记程序加载基地址到TCB中
   619                                        
   620 000000A8 89CB                             mov ebx,ecx                        ;ebx -> 申请到的内存首地址
   621 000000AA 31D2                             xor edx,edx
   622 000000AC B900020000                       mov ecx,512
   623 000000B1 F7F1                             div ecx
   624 000000B3 89C1                             mov ecx,eax                        ;总扇区数 
   625                                        
   626 000000B5 B808000000                       mov eax,mem_0_4_gb_seg_sel         ;切换DS到0-4GB的段
   627 000000BA 8ED8                             mov ds,eax
   628                                  
   629 000000BC 8B4530                           mov eax,[ebp+12*4]                 ;起始扇区号 
   630                                    .b1:
   631 000000BF 9A[B9000000]2800                 call sys_routine_seg_sel:read_hard_disk_0
   632 000000C6 40                               inc eax
   633 000000C7 E2F6                             loop .b1                           ;循环读，直到读完整个用户程序
   634                                  
   635 000000C9 268B7E06                         mov edi,[es:esi+0x06]              ;获得程序加载基地址
   636                                  
   637                                           ;建立程序头部段描述符
   638 000000CD 89F8                             mov eax,edi                        ;程序头部起始线性地址
   639 000000CF 8B5F04                           mov ebx,[edi+0x04]                 ;段长度
   640 000000D2 4B                               dec ebx                            ;段界限
   641 000000D3 B900F24000                       mov ecx,0x0040f200                 ;字节粒度的数据段描述符，特权级3 
   642 000000D8 9A[B3010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   643                                        
   644                                           ;安装头部段描述符到LDT中 
   645 000000DF 89F3                             mov ebx,esi                        ;TCB的基地址
   646 000000E1 E81AFFFFFF                       call fill_descriptor_in_ldt
   647                                  
   648 000000E6 6683C903                         or cx,0000_0000_0000_0011B         ;设置选择子的特权级为3
   649 000000EA 2666894E44                       mov [es:esi+0x44],cx               ;登记程序头部段选择子到TCB 
   650 000000EF 66894F04                         mov [edi+0x04],cx                  ;和头部内 
   651                                        
   652                                           ;建立程序代码段描述符
   653 000000F3 89F8                             mov eax,edi
   654 000000F5 03470C                           add eax,[edi+0x0c]                 ;代码起始线性地址
   655 000000F8 8B5F10                           mov ebx,[edi+0x10]                 ;段长度
   656 000000FB 4B                               dec ebx                            ;段界限
   657 000000FC B900F84000                       mov ecx,0x0040f800                 ;字节粒度的代码段描述符，特权级3
   658 00000101 9A[B3010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   659 00000108 89F3                             mov ebx,esi                        ;TCB的基地址
   660 0000010A E8F1FEFFFF                       call fill_descriptor_in_ldt
   661 0000010F 6683C903                         or cx,0000_0000_0000_0011B         ;设置选择子的特权级为3
   662 00000113 66894F0C                         mov [edi+0x0c],cx                  ;登记代码段选择子到头部
   663                                  
   664                                           ;建立程序数据段描述符
   665 00000117 89F8                             mov eax,edi
   666 00000119 034714                           add eax,[edi+0x14]                 ;数据段起始线性地址
   667 0000011C 8B5F18                           mov ebx,[edi+0x18]                 ;段长度
   668 0000011F 4B                               dec ebx                            ;段界限 
   669 00000120 B900F24000                       mov ecx,0x0040f200                 ;字节粒度的数据段描述符，特权级3
   670 00000125 9A[B3010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   671 0000012C 89F3                             mov ebx,esi                        ;TCB的基地址
   672 0000012E E8CDFEFFFF                       call fill_descriptor_in_ldt
   673 00000133 6683C903                         or cx,0000_0000_0000_0011B         ;设置选择子的特权级为3
   674 00000137 66894F14                         mov [edi+0x14],cx                  ;登记数据段选择子到头部
   675                                  
   676                                           ;建立程序堆栈段描述符
   677 0000013B 89F8                             mov eax,edi
   678 0000013D 03471C                           add eax,[edi+0x1c]                 ;数据段起始线性地址
   679 00000140 8B5F20                           mov ebx,[edi+0x20]                 ;段长度
   680 00000143 4B                               dec ebx                            ;段界限
   681 00000144 B900F24000                       mov ecx,0x0040f200                 ;字节粒度的堆栈段描述符，特权级3
   682 00000149 9A[B3010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   683 00000150 89F3                             mov ebx,esi                        ;TCB的基地址
   684 00000152 E8A9FEFFFF                       call fill_descriptor_in_ldt
   685 00000157 6683C903                         or cx,0000_0000_0000_0011B         ;设置选择子的特权级为3
   686 0000015B 66894F1C                         mov [edi+0x1c],cx                  ;登记堆栈段选择子到头部
   687                                  
   688                                           ;重定位SALT 
   689 0000015F B808000000                       mov eax,mem_0_4_gb_seg_sel         ;这里和前一章不同，头部段描述符
   690 00000164 8EC0                             mov es,eax                         ;已安装，但还没有生效，故只能通
   691                                                                              ;过4GB段访问用户程序头部          
   692 00000166 B830000000                       mov eax,core_data_seg_sel
   693 0000016B 8ED8                             mov ds,eax
   694                                        
   695 0000016D FC                               cld
   696                                  
   697 0000016E 268B4F24                         mov ecx,[es:edi+0x24]              ;U-SALT条目数(通过访问4GB段取得) 
   698 00000172 83C728                           add edi,0x28                       ;U-SALT在4GB段内的偏移 
   699                                    .b2: 
   700 00000175 51                               push ecx
   701 00000176 57                               push edi
   702                                        
   703 00000177 B905000000                       mov ecx,salt_items
   704 0000017C BE[0A000000]                     mov esi,salt
   705                                    .b3:
   706 00000181 57                               push edi
   707 00000182 56                               push esi
   708 00000183 51                               push ecx
   709                                  
   710 00000184 B940000000                       mov ecx,64                         ;检索表中，每条目的比较次数 
   711 00000189 F3A7                             repe cmpsd                         ;每次比较4字节 
   712 0000018B 7519                             jnz .b4
   713 0000018D 8B06                             mov eax,[esi]                      ;若匹配，则esi恰好指向其后的地址
   714 0000018F 26898700FFFFFF                   mov [es:edi-256],eax               ;将字符串改写成偏移地址 
   715 00000196 668B4604                         mov ax,[esi+4]
   716 0000019A 6683C803                         or ax,0000000000000011B            ;以用户程序自己的特权级使用调用门
   717                                                                              ;故RPL=3 
   718 0000019E 2666898704FFFFFF                 mov [es:edi-252],ax                ;回填调用门选择子 
   719                                    .b4:
   720                                        
   721 000001A6 59                               pop ecx
   722 000001A7 5E                               pop esi
   723 000001A8 81C606010000                     add esi,salt_item_len
   724 000001AE 5F                               pop edi                            ;从头比较 
   725 000001AF E2D0                             loop .b3
   726                                        
   727 000001B1 5F                               pop edi
   728 000001B2 81C700010000                     add edi,256
   729 000001B8 59                               pop ecx
   730 000001B9 E2BA                             loop .b2
   731                                  
   732 000001BB 8B752C                           mov esi,[ebp+11*4]                 ;从堆栈中取得TCB的基地址
   733                                  
   734                                           ;创建0特权级栈
   735 000001BE B900000000                       mov ecx,0                          ;以4KB为单位的栈段界限值
   736 000001C3 26894E1A                         mov [es:esi+0x1a],ecx              ;登记0特权级栈界限到TCB
   737 000001C7 41                               inc ecx
   738 000001C8 C1E10C                           shl ecx,12                         ;乘以4096，得到段大小
   739 000001CB 51                               push ecx
   740 000001CC 9A[27010000]2800                 call sys_routine_seg_sel:allocate_memory
   741 000001D3 26894E1E                         mov [es:esi+0x1e],ecx              ;登记0特权级栈基地址到TCB
   742 000001D7 89C8                             mov eax,ecx
   743 000001D9 268B5E1A                         mov ebx,[es:esi+0x1a]              ;段长度（界限）
   744 000001DD B90092C000                       mov ecx,0x00c09200                 ;4KB粒度，读写，特权级0
   745 000001E2 9A[B3010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   746 000001E9 89F3                             mov ebx,esi                        ;TCB的基地址
   747 000001EB E810FEFFFF                       call fill_descriptor_in_ldt
   748                                           ;or cx,0000_0000_0000_0000          ;设置选择子的特权级为0
   749 000001F0 2666894E22                       mov [es:esi+0x22],cx               ;登记0特权级堆栈选择子到TCB
   750 000001F5 268F4624                         pop dword [es:esi+0x24]            ;登记0特权级堆栈初始ESP到TCB
   751                                  
   752                                           ;创建1特权级堆栈
   753 000001F9 B900000000                       mov ecx,0
   754 000001FE 26894E28                         mov [es:esi+0x28],ecx              ;登记1特权级堆栈尺寸到TCB
   755 00000202 41                               inc ecx
   756 00000203 C1E10C                           shl ecx,12                         ;乘以4096，得到段大小
   757 00000206 51                               push ecx
   758 00000207 9A[27010000]2800                 call sys_routine_seg_sel:allocate_memory
   759 0000020E 26894E2C                         mov [es:esi+0x2c],ecx              ;登记1特权级堆栈基地址到TCB
   760 00000212 89C8                             mov eax,ecx
   761 00000214 268B5E28                         mov ebx,[es:esi+0x28]              ;段长度（界限）
   762 00000218 B900B2C000                       mov ecx,0x00c0b200                 ;4KB粒度，读写，特权级1
   763 0000021D 9A[B3010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   764 00000224 89F3                             mov ebx,esi                        ;TCB的基地址
   765 00000226 E8D5FDFFFF                       call fill_descriptor_in_ldt
   766 0000022B 6683C901                         or cx,0000_0000_0000_0001          ;设置选择子的特权级为1
   767 0000022F 2666894E30                       mov [es:esi+0x30],cx               ;登记1特权级堆栈选择子到TCB
   768 00000234 268F4632                         pop dword [es:esi+0x32]            ;登记1特权级堆栈初始ESP到TCB
   769                                  
   770                                           ;创建2特权级堆栈
   771 00000238 B900000000                       mov ecx,0
   772 0000023D 26894E36                         mov [es:esi+0x36],ecx              ;登记2特权级堆栈尺寸到TCB
   773 00000241 41                               inc ecx
   774 00000242 C1E10C                           shl ecx,12                         ;乘以4096，得到段大小
   775 00000245 51                               push ecx
   776 00000246 9A[27010000]2800                 call sys_routine_seg_sel:allocate_memory
   777 0000024D 26894E3A                         mov [es:esi+0x3a],ecx              ;登记2特权级堆栈基地址到TCB
   778 00000251 89C8                             mov eax,ecx
   779 00000253 268B5E36                         mov ebx,[es:esi+0x36]              ;段长度（界限）
   780 00000257 B900D2C000                       mov ecx,0x00c0d200                 ;4KB粒度，读写，特权级2
   781 0000025C 9A[B3010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   782 00000263 89F3                             mov ebx,esi                        ;TCB的基地址
   783 00000265 E896FDFFFF                       call fill_descriptor_in_ldt
   784 0000026A 6683C90A                         or cx,0000_0000_0000_0010          ;设置选择子的特权级为2
   785 0000026E 2666894E3E                       mov [es:esi+0x3e],cx               ;登记2特权级堆栈选择子到TCB
   786 00000273 268F4640                         pop dword [es:esi+0x40]            ;登记2特权级堆栈初始ESP到TCB
   787                                  
   788                                           ;在GDT中登记LDT描述符
   789 00000277 268B460C                         mov eax,[es:esi+0x0c]              ;LDT的起始线性地址
   790 0000027B 260FB75E0A                       movzx ebx,word [es:esi+0x0a]       ;LDT段界限
   791 00000280 B900820000                       mov ecx,0x00008200                 ;LDT描述符，特权级0
   792 00000285 9A[B3010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   793 0000028C 9A[57010000]2800                 call sys_routine_seg_sel:set_up_gdt_descriptor
   794 00000293 2666894E10                       mov [es:esi+0x10],cx               ;登记LDT选择子到TCB中
   795                                         
   796                                           ;创建用户程序的TSS
   797 00000298 B968000000                       mov ecx,104                        ;tss的基本尺寸
   798 0000029D 2666894E12                       mov [es:esi+0x12],cx              
   799 000002A2 2666FF4E12                       dec word [es:esi+0x12]             ;登记TSS界限值到TCB 
   800 000002A7 9A[27010000]2800                 call sys_routine_seg_sel:allocate_memory
   801 000002AE 26894E14                         mov [es:esi+0x14],ecx              ;登记TSS基地址到TCB
   802                                        
   803                                           ;登记基本的TSS表格内容
   804 000002B2 2666C7010000                     mov word [es:ecx+0],0              ;反向链=0
   805                                  
   806 000002B8 268B5624                         mov edx,[es:esi+0x24]              ;登记0特权级堆栈初始ESP
   807 000002BC 26895104                         mov [es:ecx+4],edx                 ;到TSS中
   808                                  
   809 000002C0 26668B5622                       mov dx,[es:esi+0x22]               ;登记0特权级堆栈段选择子
   810 000002C5 2666895108                       mov [es:ecx+8],dx                  ;到TSS中
   811                                  
   812 000002CA 268B5632                         mov edx,[es:esi+0x32]              ;登记1特权级堆栈初始ESP
   813 000002CE 2689510C                         mov [es:ecx+12],edx                ;到TSS中
   814                                  
   815 000002D2 26668B5630                       mov dx,[es:esi+0x30]               ;登记1特权级堆栈段选择子
   816 000002D7 2666895110                       mov [es:ecx+16],dx                 ;到TSS中
   817                                  
   818 000002DC 268B5640                         mov edx,[es:esi+0x40]              ;登记2特权级堆栈初始ESP
   819 000002E0 26895114                         mov [es:ecx+20],edx                ;到TSS中
   820                                  
   821 000002E4 26668B563E                       mov dx,[es:esi+0x3e]               ;登记2特权级堆栈段选择子
   822 000002E9 2666895118                       mov [es:ecx+24],dx                 ;到TSS中
   823                                  
   824 000002EE 26668B5610                       mov dx,[es:esi+0x10]               ;登记任务的LDT选择子
   825 000002F3 2666895160                       mov [es:ecx+96],dx                 ;到TSS中
   826                                  
   827 000002F8 26668B5612                       mov dx,[es:esi+0x12]               ;登记任务的I/O位图偏移
   828 000002FD 2666895166                       mov [es:ecx+102],dx                ;到TSS中
   829                                  
   830 00000302 2666C741640000                   mov word [es:ecx+100],0            ;T=0
   831                                  
   832 00000309 26C7411C00000000                 mov dword [es:ecx+28],0            ;登记CR3(PDBR)
   833                                  
   834                                           ;访问用户程序头部，获取数据填充TSS 
   835 00000311 8B5D2C                           mov ebx,[ebp+11*4]                 ;从堆栈中取得TCB的基地址
   836 00000314 268B7B06                         mov edi,[es:ebx+0x06]              ;用户程序加载的基地址 
   837                                  
   838 00000318 268B5708                         mov edx,[es:edi+0x08]              ;登记程序入口点（EIP）
   839 0000031C 26895120                         mov [es:ecx+32],edx                ;到TSS
   840                                  
   841 00000320 26668B570C                       mov dx,[es:edi+0x0c]               ;登记程序代码段（CS）选择子
   842 00000325 266689514C                       mov [es:ecx+76],dx                 ;到TSS中
   843                                  
   844 0000032A 26668B571C                       mov dx,[es:edi+0x1c]               ;登记程序堆栈段（SS）选择子
   845 0000032F 2666895150                       mov [es:ecx+80],dx                 ;到TSS中
   846                                  
   847 00000334 26668B5704                       mov dx,[es:edi+0x04]               ;登记程序数据段（DS）选择子
   848 00000339 2666895154                       mov word [es:ecx+84],dx            ;到TSS中。注意，它指向程序头部段
   849                                        
   850 0000033E 2666C741480000                   mov word [es:ecx+72],0             ;TSS中的ES=0
   851                                  
   852 00000345 2666C741580000                   mov word [es:ecx+88],0             ;TSS中的FS=0
   853                                  
   854 0000034C 2666C7415C0000                   mov word [es:ecx+92],0             ;TSS中的GS=0
   855                                  
   856 00000353 9C                               pushfd
   857 00000354 268F4124                         pop dword [es:ecx+36]              ;EFLAGS
   858                                  
   859                                           ;在GDT中登记TSS描述符
   860 00000358 268B4614                         mov eax,[es:esi+0x14]              ;TSS的起始线性地址
   861 0000035C 260FB75E12                       movzx ebx,word [es:esi+0x12]       ;段长度（界限）
   862 00000361 B900890000                       mov ecx,0x00008900                 ;TSS描述符，特权级0
   863 00000366 9A[B3010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   864 0000036D 9A[57010000]2800                 call sys_routine_seg_sel:set_up_gdt_descriptor
   865 00000374 2666894E18                       mov [es:esi+0x18],cx               ;登记TSS选择子到TCB
   866                                  
   867 00000379 07                               pop es                             ;恢复到调用此过程前的es段 
   868 0000037A 1F                               pop ds                             ;恢复到调用此过程前的ds段
   869                                        
   870 0000037B 61                               popad
   871                                        
   872 0000037C C20800                           ret 8                              ;丢弃调用本过程前压入的参数 
   873                                        
   874                                  ;-------------------------------------------------------------------------------
   875                                  append_to_tcb_link:                         ;在TCB链上追加任务控制块
   876                                                                              ;输入：ECX=TCB线性基地址
   877 0000037F 50                               push eax
   878 00000380 52                               push edx
   879 00000381 1E                               push ds
   880 00000382 06                               push es
   881                                           
   882 00000383 B830000000                       mov eax,core_data_seg_sel          ;令DS指向内核数据段 
   883 00000388 8ED8                             mov ds,eax
   884 0000038A B808000000                       mov eax,mem_0_4_gb_seg_sel         ;令ES指向0..4GB段
   885 0000038F 8EC0                             mov es,eax
   886                                           
   887 00000391 26C70100000000                   mov dword [es: ecx+0x00],0         ;当前TCB指针域清零，以指示这是最
   888                                                                              ;后一个TCB
   889                                                                               
   890 00000398 A1[290E0000]                     mov eax,[tcb_chain]                ;TCB表头指针
   891 0000039D 09C0                             or eax,eax                         ;链表为空？
   892 0000039F 740E                             jz .notcb 
   893                                           
   894                                    .searc:
   895 000003A1 89C2                             mov edx,eax
   896 000003A3 268B02                           mov eax,[es: edx+0x00]
   897 000003A6 09C0                             or eax,eax               
   898 000003A8 75F7                             jnz .searc
   899                                           
   900 000003AA 26890A                           mov [es: edx+0x00],ecx
   901 000003AD EB06                             jmp .retpc
   902                                           
   903                                    .notcb:       
   904 000003AF 890D[290E0000]                   mov [tcb_chain],ecx                ;若为空表，直接令表头指针指向TCB
   905                                           
   906                                    .retpc:
   907 000003B5 07                               pop es
   908 000003B6 1F                               pop ds
   909 000003B7 5A                               pop edx
   910 000003B8 58                               pop eax
   911                                           
   912 000003B9 C3                               ret
   913                                           
   914                                  ;-------------------------------------------------------------------------------
   915                                  start:
   916 000003BA B930000000                       mov ecx,core_data_seg_sel          ;令DS指向核心数据段 
   917 000003BF 8ED9                             mov ds,ecx
   918                                  
   919 000003C1 B908000000                       mov ecx,mem_0_4_gb_seg_sel         ;令ES指向4GB数据段 
   920 000003C6 8EC1                             mov es,ecx
   921                                  
   922 000003C8 BB[28050000]                     mov ebx,message_1                    
   923 000003CD 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   924                                                                           
   925                                           ;显示处理器品牌信息 
   926 000003D4 B802000080                       mov eax,0x80000002
   927 000003D9 0FA2                             cpuid
   928 000003DB A3[F00D0000]                     mov [cpu_brand + 0x00],eax
   929 000003E0 891D[F40D0000]                   mov [cpu_brand + 0x04],ebx
   930 000003E6 890D[F80D0000]                   mov [cpu_brand + 0x08],ecx
   931 000003EC 8915[FC0D0000]                   mov [cpu_brand + 0x0c],edx
   932                                        
   933 000003F2 B803000080                       mov eax,0x80000003
   934 000003F7 0FA2                             cpuid
   935 000003F9 A3[000E0000]                     mov [cpu_brand + 0x10],eax
   936 000003FE 891D[040E0000]                   mov [cpu_brand + 0x14],ebx
   937 00000404 890D[080E0000]                   mov [cpu_brand + 0x18],ecx
   938 0000040A 8915[0C0E0000]                   mov [cpu_brand + 0x1c],edx
   939                                  
   940 00000410 B804000080                       mov eax,0x80000004
   941 00000415 0FA2                             cpuid
   942 00000417 A3[100E0000]                     mov [cpu_brand + 0x20],eax
   943 0000041C 891D[140E0000]                   mov [cpu_brand + 0x24],ebx
   944 00000422 890D[180E0000]                   mov [cpu_brand + 0x28],ecx
   945 00000428 8915[1C0E0000]                   mov [cpu_brand + 0x2c],edx
   946                                  
   947 0000042E BB[EB0D0000]                     mov ebx,cpu_brnd0                  ;显示处理器品牌信息 
   948 00000433 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   949 0000043A BB[F00D0000]                     mov ebx,cpu_brand
   950 0000043F 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   951 00000446 BB[240E0000]                     mov ebx,cpu_brnd1
   952 0000044B 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   953                                  
   954                                           ;以下开始安装为整个系统服务的调用门。特权级之间的控制转移必须使用门
   955 00000452 BF[0A000000]                     mov edi,salt                       ;C-SALT表的起始位置 
   956 00000457 B905000000                       mov ecx,salt_items                 ;C-SALT表的条目数量 
   957                                    .b3:
   958 0000045C 51                               push ecx   
   959 0000045D 8B8700010000                     mov eax,[edi+256]                  ;该条目入口点的32位偏移地址 
   960 00000463 668B9F04010000                   mov bx,[edi+260]                   ;该条目入口点的段选择子 
   961 0000046A 66B900EC                         mov cx,1_11_0_1100_000_00000B      ;特权级3的调用门(3以上的特权级才
   962                                                                              ;允许访问)，0个参数(因为用寄存器
   963                                                                              ;传递参数，而没有用栈) 
   964 0000046E 9A[CE010000]2800                 call sys_routine_seg_sel:make_gate_descriptor
   965 00000475 9A[57010000]2800                 call sys_routine_seg_sel:set_up_gdt_descriptor
   966 0000047C 66898F04010000                   mov [edi+260],cx                   ;将返回的门描述符选择子回填
   967 00000483 81C706010000                     add edi,salt_item_len              ;指向下一个C-SALT条目 
   968 00000489 59                               pop ecx
   969 0000048A E2D0                             loop .b3
   970                                  
   971                                           ;对门进行测试 
   972 0000048C BB[B8050000]                     mov ebx,message_2
   973 00000491 FF1D[0A010000]                   call far [salt_1+256]              ;通过门显示信息(偏移量将被忽略) 
   974                                  
   975                                           ;为内核任务创建任务控制块TCB
   976 00000497 B946000000                       mov ecx,0x46
   977 0000049C 9A[27010000]2800                 call sys_routine_seg_sel:allocate_memory
   978 000004A3 E8D7FEFFFF                       call append_to_tcb_link            ;将此TCB添加到TCB链中
   979 000004A8 89CE                             mov esi,ecx
   980                                  
   981                                           ;为内核任务的TSS分配内存空间
   982 000004AA B968000000                       mov ecx,104                        ;为该任务的TSS分配内存
   983 000004AF 9A[27010000]2800                 call sys_routine_seg_sel:allocate_memory
   984 000004B6 26894E14                         mov [es:esi+0x14],ecx              ;在内核TCB中保存TSS基地址
   985                                        
   986                                           ;在程序管理器的TSS中设置必要的项目 
   987 000004BA 2666C741600000                   mov word [es:ecx+96],0             ;没有LDT。处理器允许没有LDT的任务。
   988 000004C1 2666C741666700                   mov word [es:ecx+102],103          ;没有I/O位图。0特权级事实上不需要。
   989 000004C8 2666C7010000                     mov word [es:ecx+0],0              ;反向链=0
   990 000004CE 26C7411C00000000                 mov dword [es:ecx+28],0            ;登记CR3(PDBR)
   991 000004D6 2666C741640000                   mov word [es:ecx+100],0            ;T=0
   992                                                                              ;不需要0、1、2特权级堆栈。0特级不
   993                                                                              ;会向低特权级转移控制。
   994                                           
   995                                           ;创建TSS描述符，并安装到GDT中 
   996 000004DD 89C8                             mov eax,ecx                        ;TSS的起始线性地址
   997 000004DF BB67000000                       mov ebx,103                        ;段长度（界限）
   998 000004E4 B900890000                       mov ecx,0x00008900                 ;TSS描述符，特权级0
   999 000004E9 9A[B3010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
  1000 000004F0 9A[57010000]2800                 call sys_routine_seg_sel:set_up_gdt_descriptor
  1001 000004F7 2666894E18                       mov word [es:esi+0x18],cx          ;登记TSS选择子到TCB
  1002 000004FC 2666C74604FFFF                   mov word [es:esi+0x04],0xffff      ;任务的状态为“忙”
  1003                                  
  1004                                           ;任务寄存器TR中的内容是任务存在的标志，该内容也决定了当前任务是谁。
  1005                                           ;下面的指令为当前正在执行的0特权级任务“程序管理器”后补手续（TSS）。
  1006 00000503 0F00D9                           ltr cx
  1007                                  
  1008                                           ;现在可认为“程序管理器”任务正执行中
  1009 00000506 BB[2D0E0000]                     mov ebx,core_msg1
  1010 0000050B 9A[00000000]2800                 call sys_routine_seg_sel:put_string
  1011                                  
  1012                                           ;以下开始创建用户任务
  1013 00000512 B946000000                       mov ecx,0x46
  1014 00000517 9A[27010000]2800                 call sys_routine_seg_sel:allocate_memory
  1015 0000051E 2666C741040000                   mov word [es:ecx+0x04],0           ;任务状态：就绪
  1016 00000525 E855FEFFFF                       call append_to_tcb_link            ;将此TCB添加到TCB链中
  1017                                        
  1018 0000052A 6A32                             push dword 50                      ;用户程序位于逻辑50扇区
  1019 0000052C 51                               push ecx                           ;压入任务控制块起始线性地址 
  1020                                         
  1021 0000052D E812FBFFFF                       call load_relocate_program         
  1022                                  
  1023                                           ;可以创建更多的任务，例如：
  1024                                           ;mov ecx,0x46
  1025                                           ;call sys_routine_seg_sel:allocate_memory
  1026                                           ;mov word [es:ecx+0x04],0           ;任务状态：空闲
  1027                                           ;call append_to_tcb_link            ;将此TCB添加到TCB链中
  1028                                  
  1029                                           ;push dword 50                      ;用户程序位于逻辑50扇区
  1030                                           ;push ecx                           ;压入任务控制块起始线性地址
  1031                                  
  1032                                           ;call load_relocate_program
  1033                                  
  1034                                    .do_switch:
  1035                                           ;主动切换到其它任务，给它们运行的机会
  1036 00000532 9A[E8010000]2800                 call sys_routine_seg_sel:initiate_task_switch
  1037                                  
  1038 00000539 BB[7B0E0000]                     mov ebx,core_msg2
  1039 0000053E 9A[00000000]2800                 call sys_routine_seg_sel:put_string
  1040                                  
  1041                                           ;这里可以添加创建新的任务的功能，比如：
  1042                                           ;mov ecx,0x46
  1043                                           ;call sys_routine_seg_sel:allocate_memory
  1044                                           ;mov word [es:ecx+0x04],0           ;任务状态：空闲
  1045                                           ;call append_to_tcb_link            ;将此TCB添加到TCB链中
  1046                                  
  1047                                           ;push dword 50                      ;用户程序位于逻辑50扇区
  1048                                           ;push ecx                           ;压入任务控制块起始线性地址
  1049                                  
  1050                                           ;call load_relocate_program
  1051                                  
  1052                                           ;清理已经终止的任务，并回收它们占用的资源
  1053 00000545 9A[87020000]2800                 call sys_routine_seg_sel:do_task_clean
  1054                                  
  1055 0000054C A1[290E0000]                     mov eax,[tcb_chain]
  1056                                    .find_ready:
  1057 00000551 266683780400                     cmp word [es:eax+0x04],0x0000      ;还有处于就绪状态的任务？
  1058 00000557 74D9                             jz .do_switch                      ;有，继续执行任务切换
  1059 00000559 268B00                           mov eax,[es:eax]
  1060 0000055C 09C0                             or eax,eax                         ;还有用户任务吗？
  1061 0000055E 75F1                             jnz .find_ready                    ;一直搜索到链表尾部
  1062                                  
  1063                                           ;已经没有可以切换的任务，停机
  1064 00000560 BB[9A0E0000]                     mov ebx,core_msg3
  1065 00000565 9A[00000000]2800                 call sys_routine_seg_sel:put_string
  1066 0000056C F4                               hlt
  1067                                  
  1068                                  core_code_end:
  1069                                  
  1070                                  ;-------------------------------------------------------------------------------
  1071                                  SECTION core_trail
  1072                                  ;-------------------------------------------------------------------------------
  1073                                  core_end:
