     1                                           ;代码清单10-1
     2                                           ;文件名：c10_1.asm
     3                                           ;文件说明：用户程序 
     4                                           ;创建日期：2011-4-16 22:03；修改于2021-10-14 9:00
     5                                           
     6                                  ;===============================================================================
     7                                  SECTION header vstart=0                     ;定义用户程序头部段 
     8 00000000 [00000000]                  program_length  dd program_end          ;程序总长度[0x00]
     9                                      
    10                                      ;用户程序入口点
    11 00000004 [8D00]                      code_entry      dw start                ;偏移地址[0x04]
    12 00000006 [00000000]                                  dd section.code.start   ;段地址[0x06] 
    13                                      
    14 0000000A 0300                        realloc_tbl_len dw (header_end-realloc_begin)/4
    15                                                                              ;段重定位表项个数[0x0a]
    16                                      
    17                                      realloc_begin:
    18                                      ;段重定位表           
    19 0000000C [00000000]                  code_segment    dd section.code.start   ;[0x0c]
    20 00000010 [00000000]                  data_segment    dd section.data.start   ;[0x14]
    21 00000014 [00000000]                  stack_segment   dd section.stack.start  ;[0x1c]
    22                                      
    23                                  header_end:                
    24                                      
    25                                  ;===============================================================================
    26                                  SECTION code align=16 vstart=0           ;定义代码段（16字节对齐） 
    27                                  new_int_0x70:
    28 00000000 50                            push ax
    29 00000001 53                            push bx
    30 00000002 51                            push cx
    31 00000003 52                            push dx
    32 00000004 06                            push es
    33                                        
    34                                    .w0:                                    
    35 00000005 B00A                          mov al,0x0a                        ;阻断NMI。当然，通常是不必要的
    36 00000007 0C80                          or al,0x80                          
    37 00000009 E670                          out 0x70,al
    38 0000000B E471                          in al,0x71                         ;读寄存器A
    39 0000000D A880                          test al,0x80                       ;测试第7位UIP 
    40 0000000F 75F4                          jnz .w0                            ;以上代码对于更新周期结束中断来说 
    41                                                                           ;是不必要的 
    42 00000011 30C0                          xor al,al
    43 00000013 0C80                          or al,0x80
    44 00000015 E670                          out 0x70,al
    45 00000017 E471                          in al,0x71                         ;读RTC当前时间(秒)
    46 00000019 50                            push ax
    47                                  
    48 0000001A B002                          mov al,2
    49 0000001C 0C80                          or al,0x80
    50 0000001E E670                          out 0x70,al
    51 00000020 E471                          in al,0x71                         ;读RTC当前时间(分)
    52 00000022 50                            push ax
    53                                  
    54 00000023 B004                          mov al,4
    55 00000025 0C80                          or al,0x80
    56 00000027 E670                          out 0x70,al
    57 00000029 E471                          in al,0x71                         ;读RTC当前时间(时)
    58 0000002B 50                            push ax
    59                                  
    60 0000002C B00C                          mov al,0x0c                        ;寄存器C的索引。且开放NMI 
    61 0000002E E670                          out 0x70,al
    62 00000030 E471                          in al,0x71                         ;读一下RTC的寄存器C，否则只发生一次中断
    63                                                                           ;此处不考虑闹钟和周期性中断的情况 
    64 00000032 B800B8                        mov ax,0xb800
    65 00000035 8EC0                          mov es,ax
    66                                  
    67 00000037 58                            pop ax
    68 00000038 E84200                        call bcd_to_ascii
    69 0000003B BBC807                        mov bx,12*160 + 36*2               ;从屏幕上的12行36列开始显示
    70                                  
    71 0000003E 268827                        mov [es:bx],ah
    72 00000041 26884702                      mov [es:bx+2],al                   ;显示两位小时数字
    73                                  
    74 00000045 B03A                          mov al,':'
    75 00000047 26884704                      mov [es:bx+4],al                   ;显示分隔符':'
    76 0000004B 26F65705                      not byte [es:bx+5]                 ;反转显示属性 
    77                                  
    78 0000004F 58                            pop ax
    79 00000050 E82A00                        call bcd_to_ascii
    80 00000053 26886706                      mov [es:bx+6],ah
    81 00000057 26884708                      mov [es:bx+8],al                   ;显示两位分钟数字
    82                                  
    83 0000005B B03A                          mov al,':'
    84 0000005D 2688470A                      mov [es:bx+10],al                  ;显示分隔符':'
    85 00000061 26F6570B                      not byte [es:bx+11]                ;反转显示属性
    86                                  
    87 00000065 58                            pop ax
    88 00000066 E81400                        call bcd_to_ascii
    89 00000069 2688670C                      mov [es:bx+12],ah
    90 0000006D 2688470E                      mov [es:bx+14],al                  ;显示两位小时数字
    91                                        
    92 00000071 B020                          mov al,0x20                        ;中断结束命令EOI 
    93 00000073 E6A0                          out 0xa0,al                        ;向从片发送 
    94 00000075 E620                          out 0x20,al                        ;向主片发送 
    95                                  
    96 00000077 07                            pop es
    97 00000078 5A                            pop dx
    98 00000079 59                            pop cx
    99 0000007A 5B                            pop bx
   100 0000007B 58                            pop ax
   101                                  
   102 0000007C CF                            iret
   103                                  
   104                                  ;-------------------------------------------------------------------------------
   105                                  bcd_to_ascii:                            ;BCD码转ASCII
   106                                                                           ;输入：AL=bcd码
   107                                                                           ;输出：AX=ascii
   108 0000007D 88C4                          mov ah,al                          ;分拆成两个数字 
   109 0000007F 240F                          and al,0x0f                        ;仅保留低4位 
   110 00000081 0430                          add al,0x30                        ;转换成ASCII 
   111                                  
   112 00000083 C0EC04                        shr ah,4                           ;逻辑右移4位 
   113 00000086 80E40F                        and ah,0x0f                        
   114 00000089 80C430                        add ah,0x30
   115                                  
   116 0000008C C3                            ret
   117                                  
   118                                  ;-------------------------------------------------------------------------------
   119                                  start:
   120 0000008D A1[1400]                      mov ax,[stack_segment]
   121 00000090 8ED0                          mov ss,ax
   122 00000092 BC[0001]                      mov sp,ss_pointer
   123 00000095 A1[1000]                      mov ax,[data_segment]
   124 00000098 8ED8                          mov ds,ax
   125                                        
   126 0000009A BB[0000]                      mov bx,init_msg                    ;显示初始信息 
   127 0000009D E85300                        call put_string
   128                                  
   129 000000A0 BB[0E00]                      mov bx,inst_msg                    ;显示安装信息 
   130 000000A3 E84D00                        call put_string
   131                                        
   132 000000A6 B070                          mov al,0x70
   133 000000A8 B304                          mov bl,4
   134 000000AA F6E3                          mul bl                             ;计算0x70号中断在IVT中的偏移
   135 000000AC 89C3                          mov bx,ax                          
   136                                  
   137 000000AE FA                            cli                                ;防止改动期间发生新的0x70号中断
   138                                  
   139 000000AF 06                            push es
   140 000000B0 B80000                        mov ax,0x0000
   141 000000B3 8EC0                          mov es,ax
   142 000000B5 26C707[0000]                  mov word [es:bx],new_int_0x70      ;偏移地址。
   143                                                                            
   144 000000BA 268C4F02                      mov word [es:bx+2],cs              ;段地址
   145 000000BE 07                            pop es
   146                                  
   147 000000BF B00B                          mov al,0x0b                        ;RTC寄存器B
   148 000000C1 0C80                          or al,0x80                         ;阻断NMI 
   149 000000C3 E670                          out 0x70,al
   150 000000C5 B012                          mov al,0x12                        ;设置寄存器B，禁止周期性中断，开放更 
   151 000000C7 E671                          out 0x71,al                        ;新结束后中断，BCD码，24小时制 
   152                                  
   153 000000C9 B00C                          mov al,0x0c
   154 000000CB E670                          out 0x70,al
   155 000000CD E471                          in al,0x71                         ;读RTC寄存器C，复位未决的中断状态
   156                                  
   157 000000CF E4A1                          in al,0xa1                         ;读8259从片的IMR寄存器 
   158 000000D1 24FE                          and al,0xfe                        ;清除bit 0(此位连接RTC)
   159 000000D3 E6A1                          out 0xa1,al                        ;写回此寄存器 
   160                                  
   161 000000D5 FB                            sti                                ;重新开放中断 
   162                                  
   163 000000D6 BB[3000]                      mov bx,done_msg                    ;显示安装完成信息 
   164 000000D9 E81700                        call put_string
   165                                  
   166 000000DC BB[3800]                      mov bx,tips_msg                    ;显示提示信息
   167 000000DF E81100                        call put_string
   168                                        
   169 000000E2 B900B8                        mov cx,0xb800
   170 000000E5 8ED9                          mov ds,cx
   171 000000E7 C606C20740                    mov byte [12*160 + 33*2],'@'       ;屏幕第12行，35列
   172                                         
   173                                   .idle:
   174 000000EC F4                            hlt                                ;使CPU进入低功耗状态，直到用中断唤醒
   175 000000ED F616C307                      not byte [12*160 + 33*2+1]         ;反转显示属性 
   176 000000F1 EBF9                          jmp .idle
   177                                  
   178                                  ;-------------------------------------------------------------------------------
   179                                  put_string:                              ;显示串(0结尾)。
   180                                                                           ;输入：DS:BX=串地址
   181 000000F3 8A0F                             mov cl,[bx]
   182 000000F5 08C9                             or cl,cl                        ;cl=0 ?
   183 000000F7 7406                             jz .exit                        ;是的，返回主程序 
   184 000000F9 E80400                           call put_char
   185 000000FC 43                               inc bx                          ;下一个字符 
   186 000000FD EBF4                             jmp put_string
   187                                  
   188                                     .exit:
   189 000000FF C3                               ret
   190                                  
   191                                  ;-------------------------------------------------------------------------------
   192                                  put_char:                                ;显示一个字符
   193                                                                           ;输入：cl=字符ascii
   194 00000100 50                               push ax
   195 00000101 53                               push bx
   196 00000102 51                               push cx
   197 00000103 52                               push dx
   198 00000104 1E                               push ds
   199 00000105 06                               push es
   200                                  
   201                                           ;以下取当前光标位置
   202 00000106 BAD403                           mov dx,0x3d4
   203 00000109 B00E                             mov al,0x0e
   204 0000010B EE                               out dx,al
   205 0000010C BAD503                           mov dx,0x3d5
   206 0000010F EC                               in al,dx                        ;高8位 
   207 00000110 88C4                             mov ah,al
   208                                  
   209 00000112 BAD403                           mov dx,0x3d4
   210 00000115 B00F                             mov al,0x0f
   211 00000117 EE                               out dx,al
   212 00000118 BAD503                           mov dx,0x3d5
   213 0000011B EC                               in al,dx                        ;低8位 
   214 0000011C 89C3                             mov bx,ax                       ;BX=代表光标位置的16位数
   215                                  
   216 0000011E 80F90D                           cmp cl,0x0d                     ;回车符？
   217 00000121 750C                             jnz .put_0a                     ;不是。看看是不是换行等字符 
   218 00000123 89D8                             mov ax,bx                       ; 
   219 00000125 B350                             mov bl,80                       
   220 00000127 F6F3                             div bl
   221 00000129 F6E3                             mul bl
   222 0000012B 89C3                             mov bx,ax
   223 0000012D EB47                             jmp .set_cursor
   224                                  
   225                                   .put_0a:
   226 0000012F 80F90A                           cmp cl,0x0a                     ;换行符？
   227 00000132 7505                             jnz .put_other                  ;不是，那就正常显示字符 
   228 00000134 83C350                           add bx,80
   229 00000137 EB0F                             jmp .roll_screen
   230                                  
   231                                   .put_other:                             ;正常显示字符
   232 00000139 B800B8                           mov ax,0xb800
   233 0000013C 8EC0                             mov es,ax
   234 0000013E D1E3                             shl bx,1
   235 00000140 26880F                           mov [es:bx],cl
   236                                  
   237                                           ;以下将光标位置推进一个字符
   238 00000143 D1EB                             shr bx,1
   239 00000145 83C301                           add bx,1
   240                                  
   241                                   .roll_screen:
   242 00000148 81FBD007                         cmp bx,2000                     ;光标超出屏幕？滚屏
   243 0000014C 7C28                             jl .set_cursor
   244 0000014E 53                               push bx
   245 0000014F B800B8                           mov ax,0xb800
   246 00000152 8ED8                             mov ds,ax
   247 00000154 8EC0                             mov es,ax
   248 00000156 FC                               cld
   249 00000157 BEA000                           mov si,0xa0
   250 0000015A BF0000                           mov di,0x00
   251 0000015D B98007                           mov cx,1920
   252 00000160 F3A5                             rep movsw
   253 00000162 BB000F                           mov bx,3840                     ;清除屏幕最底一行
   254 00000165 B95000                           mov cx,80
   255                                   .cls:
   256 00000168 26C7072007                       mov word[es:bx],0x0720
   257 0000016D 83C302                           add bx,2
   258 00000170 E2F6                             loop .cls
   259 00000172 5B                               pop bx
   260 00000173 83EB50                           sub bx,80
   261                                  
   262                                   .set_cursor:
   263 00000176 BAD403                           mov dx,0x3d4
   264 00000179 B00E                             mov al,0x0e
   265 0000017B EE                               out dx,al
   266 0000017C BAD503                           mov dx,0x3d5
   267 0000017F 88F8                             mov al,bh
   268 00000181 EE                               out dx,al
   269 00000182 BAD403                           mov dx,0x3d4
   270 00000185 B00F                             mov al,0x0f
   271 00000187 EE                               out dx,al
   272 00000188 BAD503                           mov dx,0x3d5
   273 0000018B 88D8                             mov al,bl
   274 0000018D EE                               out dx,al
   275                                  
   276 0000018E 07                               pop es
   277 0000018F 1F                               pop ds
   278 00000190 5A                               pop dx
   279 00000191 59                               pop cx
   280 00000192 5B                               pop bx
   281 00000193 58                               pop ax
   282                                  
   283 00000194 C3                               ret
   284                                  
   285                                  ;===============================================================================
   286                                  SECTION data align=16 vstart=0
   287                                  
   288 00000000 5374617274696E672E-         init_msg       db 'Starting...',0x0d,0x0a,0
   288 00000009 2E2E0D0A00         
   289                                                     
   290 0000000E 496E7374616C6C696E-         inst_msg       db 'Installing a new interrupt 70H...',0
   290 00000017 672061206E65772069-
   290 00000020 6E7465727275707420-
   290 00000029 3730482E2E2E00     
   291                                      
   292 00000030 446F6E652E0D0A00            done_msg       db 'Done.',0x0d,0x0a,0
   293                                  
   294 00000038 436C6F636B20697320-         tips_msg       db 'Clock is now working.',0
   294 00000041 6E6F7720776F726B69-
   294 0000004A 6E672E00           
   295                                                     
   296                                  ;===============================================================================
   297                                  SECTION stack align=16 vstart=0
   298                                             
   299 00000000 <res 100h>                               resb 256
   299          ******************       warning: uninitialized space declared in stack section: zeroing [-w+zeroing]
   300                                  ss_pointer:
   301                                   
   302                                  ;===============================================================================
   303                                  SECTION program_trail
   304                                  program_end:
