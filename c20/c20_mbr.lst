     1                                           ;代码清单20-1，主引导程序
     2                                           ;文件名：c20_mbr.asm
     3                                           ;李忠，2022-6-7
     4                                  
     5                                           core_base_address equ 0x00040000   ;常数，内核加载的起始内存地址 
     6                                           core_start_sector equ 0x00000001   ;常数，内核的起始逻辑扇区号 
     7                                  
     8                                  ;===============================================================================
     9                                  SECTION  mbr  vstart=0x00007c00         
    10                                  
    11 00000000 31C0                             xor ax, ax
    12 00000002 8ED8                             mov ds, ax
    13 00000004 8ED0                             mov ss, ax
    14 00000006 BC007C                           mov sp, 0x7c00
    15                                        
    16                                           ;计算GDT所在的逻辑段地址
    17 00000009 66A1[8E01]                       mov eax, [pgdt + 0x02]             ;GDT的32位物理地址
    18 0000000D 6631D2                           xor edx, edx
    19 00000010 66BB10000000                     mov ebx, 16
    20 00000016 66F7F3                           div ebx                            ;分解成16位逻辑地址 
    21                                  
    22 00000019 8ED8                             mov ds,eax                         ;令DS指向该段以进行操作
    23 0000001B 6689D3                           mov ebx,edx                        ;段内起始偏移地址 
    24                                  
    25                                           ;跳过0#号描述符的槽位 
    26                                           ;创建1#描述符，保护模式下的代码段描述符，特权级为0
    27 0000001E 6667C74308FFFF0000               mov dword [ebx+0x08], 0x0000ffff   ;基地址为0，界限0xFFFFF，DPL=00
    28 00000027 6667C7430C0098CF00               mov dword [ebx+0x0c], 0x00cf9800   ;4KB粒度，代码段描述符，向上扩展
    29                                  
    30                                           ;创建2#描述符，保护模式下的数据段和堆栈段描述符，特权级为0
    31 00000030 6667C74310FFFF0000               mov dword [ebx+0x10], 0x0000ffff   ;基地址为0，界限0xFFFFF，DPL=00
    32 00000039 6667C743140092CF00               mov dword [ebx+0x14], 0x00cf9200   ;4KB粒度，数据段描述符，向上扩展
    33                                  
    34                                           ;创建3#描述符，保护模式下的代码段描述符，特权级为3
    35 00000042 6667C74318FFFF0000               mov dword [ebx+0x18], 0x0000ffff   ;基地址为0，界限0xFFFFF，DPL=11
    36 0000004B 6667C7431C00F8CF00               mov dword [ebx+0x1c], 0x00cff800   ;4KB粒度，代码段描述符，向上扩展
    37                                  
    38                                           ;创建4#描述符，保护模式下的数据段和堆栈段描述符，特权级为3
    39 00000054 6667C74320FFFF0000               mov dword [ebx+0x20], 0x0000ffff   ;基地址为0，界限0xFFFFF，DPL=11
    40 0000005D 6667C7432400F2CF00               mov dword [ebx+0x24], 0x00cff200   ;4KB粒度，代码段描述符，向上扩展
    41                                  
    42                                  
    43                                           ;初始化描述符表寄存器GDTR
    44 00000066 2EC706[8C01]2700                 mov word [cs: pgdt],39             ;描述符表的界限
    45                                   
    46 0000006D 2E0F0116[8C01]                   lgdt [cs: pgdt]
    47                                        
    48 00000073 E492                             in al,0x92                         ;南桥芯片内的端口 
    49 00000075 0C02                             or al,0000_0010B
    50 00000077 E692                             out 0x92,al                        ;打开A20
    51                                  
    52 00000079 FA                               cli                                ;中断机制尚未工作
    53                                  
    54 0000007A 0F20C0                           mov eax,cr0                  
    55 0000007D 6683C801                         or eax,1
    56 00000081 0F22C0                           mov cr0,eax                        ;设置PE位
    57                                        
    58                                           ;以下进入保护模式... ...
    59 00000084 66EA[8C000000]0800               jmp dword 0x0008:flush             ;16位的描述符选择子：32位偏移
    60                                                                              ;清流水线并串行化处理器
    61                                           [bits 32]               
    62                                    flush:                                  
    63 0000008C B810000000                       mov eax,0x00010                    ;加载数据段(4GB)选择子
    64 00000091 8ED8                             mov ds,eax
    65 00000093 8EC0                             mov es,eax
    66 00000095 8EE0                             mov fs,eax
    67 00000097 8EE8                             mov gs,eax
    68 00000099 8ED0                             mov ss,eax                         ;加载堆栈段(4GB)选择子
    69 0000009B BC007C0000                       mov esp,0x7c00                     ;堆栈指针
    70                                           
    71                                           ;以下加载系统核心程序
    72 000000A0 BF00000400                       mov edi,core_base_address
    73                                  
    74 000000A5 B801000000                       mov eax,core_start_sector
    75 000000AA 89FB                             mov ebx,edi                        ;起始地址
    76 000000AC E896000000                       call read_hard_disk_0              ;以下读取程序的起始部分（一个扇区）
    77                                  
    78                                           ;以下判断整个程序有多大
    79 000000B1 8B07                             mov eax,[edi]                      ;核心程序尺寸
    80 000000B3 31D2                             xor edx,edx
    81 000000B5 B900020000                       mov ecx,512                        ;512字节每扇区
    82 000000BA F7F1                             div ecx
    83                                  
    84 000000BC 09D2                             or edx,edx
    85 000000BE 7501                             jnz @1                             ;未除尽，因此结果比实际扇区数少1
    86 000000C0 48                               dec eax                            ;已经读了一个扇区，扇区总数减1
    87                                     @1:
    88 000000C1 09C0                             or eax,eax                         ;考虑实际长度≤512个字节的情况
    89 000000C3 7410                             jz pge                             ;EAX=0 ?
    90                                  
    91                                           ;读取剩余的扇区
    92 000000C5 89C1                             mov ecx,eax                        ;32位模式下的LOOP使用ECX
    93 000000C7 B801000000                       mov eax,core_start_sector
    94 000000CC 40                               inc eax                            ;从下一个逻辑扇区接着读
    95                                     @2:
    96 000000CD E875000000                       call read_hard_disk_0
    97 000000D2 40                               inc eax
    98 000000D3 E2F8                             loop @2                            ;循环读，直到读完整个内核
    99                                  
   100                                     pge:
   101                                           ;准备打开分页机制。从此，再也不用在段之间转来转去，实在晕乎~ 
   102                                           
   103                                           ;创建系统内核的页目录表PDT
   104 000000D5 BB00000200                       mov ebx,0x00020000                 ;页目录表PDT的物理地址
   105                                           
   106                                           ;在页目录内创建指向页目录表自己的目录项
   107 000000DA C783FC0F0000030002-              mov dword [ebx+4092],0x00020003 
   107 000000E3 00                 
   108                                  
   109 000000E4 BA03100200                       mov edx,0x00021003                 ;MBR空间有限，后面尽量不使用立即数
   110                                           ;在页目录内创建与线性地址0x00000000对应的目录项
   111 000000E9 8913                             mov [ebx+0x000],edx                ;写入目录项（页表的物理地址和属性）      
   112                                                                              ;此目录项仅用于过渡。
   113                                           ;在页目录内创建与线性地址0x80000000对应的目录项
   114 000000EB 899300080000                     mov [ebx+0x800],edx                ;写入目录项（页表的物理地址和属性）
   115                                  
   116                                           ;创建与上面那个目录项相对应的页表，初始化页表项 
   117 000000F1 BB00100200                       mov ebx,0x00021000                 ;页表的物理地址
   118 000000F6 31C0                             xor eax,eax                        ;起始页的物理地址 
   119 000000F8 31F6                             xor esi,esi
   120                                    .b1:       
   121 000000FA 89C2                             mov edx,eax
   122 000000FC 83CA03                           or edx,0x00000003                                                      
   123 000000FF 8914B3                           mov [ebx+esi*4],edx                ;登记页的物理地址
   124 00000102 0500100000                       add eax,0x1000                     ;下一个相邻页的物理地址 
   125 00000107 46                               inc esi
   126 00000108 81FE00010000                     cmp esi,256                        ;仅低端1MB内存对应的页才是有效的 
   127 0000010E 7CEA                             jl .b1
   128                                           
   129                                           ;令CR3寄存器指向页目录，并正式开启页功能 
   130 00000110 B800000200                       mov eax,0x00020000                 ;PCD=PWT=0
   131 00000115 0F22D8                           mov cr3,eax
   132                                  
   133                                           ;将GDT的线性地址映射到从0x80000000开始的相同位置 
   134 00000118 0F0105[8C010000]                 sgdt [pgdt]
   135                                           ;mov ebx,[pgdt+2]
   136 0000011F 8105[8E010000]0000-              add dword [pgdt+2],0x80000000      ;GDTR也用的是线性地址
   136 00000127 0080               
   137 00000129 0F0115[8C010000]                 lgdt [pgdt]
   138                                  
   139 00000130 0F20C0                           mov eax,cr0
   140 00000133 0D00000080                       or eax,0x80000000
   141 00000138 0F22C0                           mov cr0,eax                        ;开启分页机制
   142                                     
   143                                           ;将堆栈映射到高端，这是非常容易被忽略的一件事。应当把内核的所有东西
   144                                           ;都移到高端，否则，一定会和正在加载的用户任务局部空间里的内容冲突，
   145                                           ;而且很难想到问题会出在这里。 
   146 0000013B 81C400000080                     add esp,0x80000000                 
   147                                                                               
   148 00000141 FF2504000480                     jmp [0x80040004]  
   149                                         
   150                                  ;-------------------------------------------------------------------------------
   151                                  read_hard_disk_0:                           ;从硬盘读取一个逻辑扇区
   152                                                                              ;EAX=逻辑扇区号
   153                                                                              ;DS:EBX=目标缓冲区地址
   154                                                                              ;返回：EBX=EBX+512 
   155 00000147 50                               push eax 
   156 00000148 51                               push ecx
   157 00000149 52                               push edx
   158                                        
   159 0000014A 50                               push eax
   160                                           
   161 0000014B 66BAF201                         mov dx,0x1f2
   162 0000014F B001                             mov al,1
   163 00000151 EE                               out dx,al                          ;读取的扇区数
   164                                  
   165 00000152 6642                             inc dx                             ;0x1f3
   166 00000154 58                               pop eax
   167 00000155 EE                               out dx,al                          ;LBA地址7~0
   168                                  
   169 00000156 6642                             inc dx                             ;0x1f4
   170 00000158 B108                             mov cl,8
   171 0000015A D3E8                             shr eax,cl
   172 0000015C EE                               out dx,al                          ;LBA地址15~8
   173                                  
   174 0000015D 6642                             inc dx                             ;0x1f5
   175 0000015F D3E8                             shr eax,cl
   176 00000161 EE                               out dx,al                          ;LBA地址23~16
   177                                  
   178 00000162 6642                             inc dx                             ;0x1f6
   179 00000164 D3E8                             shr eax,cl
   180 00000166 0CE0                             or al,0xe0                         ;第一硬盘  LBA地址27~24
   181 00000168 EE                               out dx,al
   182                                  
   183 00000169 6642                             inc dx                             ;0x1f7
   184 0000016B B020                             mov al,0x20                        ;读命令
   185 0000016D EE                               out dx,al
   186                                  
   187                                    .waits:
   188 0000016E EC                               in al,dx
   189 0000016F 2488                             and al,0x88
   190 00000171 3C08                             cmp al,0x08
   191 00000173 75F9                             jnz .waits                         ;不忙，且硬盘已准备好数据传输 
   192                                  
   193 00000175 B900010000                       mov ecx,256                        ;总共要读取的字数
   194 0000017A 66BAF001                         mov dx,0x1f0
   195                                    .readw:
   196 0000017E 66ED                             in ax,dx
   197 00000180 668903                           mov [ebx],ax
   198 00000183 83C302                           add ebx,2
   199 00000186 E2F6                             loop .readw
   200                                  
   201 00000188 5A                               pop edx
   202 00000189 59                               pop ecx
   203 0000018A 58                               pop eax
   204                                        
   205 0000018B C3                               ret
   206                                  ;-------------------------------------------------------------------------------
   207 0000018C 0000                             pgdt             dw 0
   208 0000018E 00800000                                          dd 0x00008000     ;GDT的物理/线性地址
   209                                  ;-------------------------------------------------------------------------------                             
   210 00000192 00<rep 6Ch>                      times 510-($-$$) db 0
   211 000001FE 55AA                                              db 0x55,0xaa
