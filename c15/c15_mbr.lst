     1                                           ;代码清单15-1
     2                                           ;文件名：c15_mbr.asm
     3                                           ;文件说明：硬盘主引导扇区代码 
     4                                           ;创建日期：2011-10-28 22:35，修改于2022-02-28
     5                                  
     6                                           core_base_address equ 0x00040000   ;常数，内核加载的起始内存地址
     7                                           core_start_sector equ 0x00000001   ;常数，内核的起始逻辑扇区号 
     8                                           
     9 00000000 8CC8                             mov ax,cs                          ;设置堆栈段和栈指针
    10 00000002 8ED0                             mov ss,ax
    11 00000004 BC007C                           mov sp,0x7c00
    12                                        
    13                                           ;计算GDT所在的逻辑段地址
    14 00000007 2E66A1[987D]                     mov eax,[cs:pgdt+0x7c00+0x02]      ;GDT的32位物理地址 
    15 0000000C 6631D2                           xor edx,edx
    16 0000000F 66BB10000000                     mov ebx,16
    17 00000015 66F7F3                           div ebx                            ;分解成16位逻辑地址 
    18                                  
    19 00000018 8ED8                             mov ds,eax                         ;令DS指向该段以进行操作
    20 0000001A 6689D3                           mov ebx,edx                        ;段内起始偏移地址 
    21                                  
    22                                           ;跳过0#号描述符的槽位 
    23                                           ;创建1#描述符，这是一个数据段，对应0~4GB的线性地址空间
    24 0000001D 6667C74308FFFF0000               mov dword [ebx+0x08],0x0000ffff    ;基地址为0，段界限为0xFFFFF
    25 00000026 6667C7430C0092CF00               mov dword [ebx+0x0c],0x00cf9200    ;粒度为4KB，存储器段描述符 
    26                                  
    27                                           ;创建保护模式下初始代码段描述符
    28 0000002F 6667C74310FF01007C               mov dword [ebx+0x10],0x7c0001ff    ;基地址为0x00007c00，界限0x1FF 
    29 00000038 6667C7431400984000               mov dword [ebx+0x14],0x00409800    ;粒度为1个字节，代码段描述符 
    30                                  
    31                                           ;建立保护模式下的堆栈段描述符      ;基地址为0x00007C00，界限0xFFFFE 
    32 00000041 6667C74318FEFF007C               mov dword [ebx+0x18],0x7c00fffe    ;粒度为4KB 
    33 0000004A 6667C7431C0096CF00               mov dword [ebx+0x1c],0x00cf9600
    34                                           
    35                                           ;建立保护模式下的显示缓冲区描述符   
    36 00000053 6667C74320FF7F0080               mov dword [ebx+0x20],0x80007fff    ;基地址为0x000B8000，界限0x07FFF 
    37 0000005C 6667C743240B924000               mov dword [ebx+0x24],0x0040920b    ;粒度为字节
    38                                           
    39                                           ;初始化描述符表寄存器GDTR
    40 00000065 2EC706[967D]2700                 mov word [cs: pgdt+0x7c00],39      ;描述符表的界限   
    41                                   
    42 0000006C 2E0F0116[967D]                   lgdt [cs: pgdt+0x7c00]
    43                                        
    44 00000072 E492                             in al,0x92                         ;南桥芯片内的端口 
    45 00000074 0C02                             or al,0000_0010B
    46 00000076 E692                             out 0x92,al                        ;打开A20
    47                                  
    48 00000078 FA                               cli                                ;中断机制尚未工作
    49                                  
    50 00000079 0F20C0                           mov eax,cr0
    51 0000007C 6683C801                         or eax,1
    52 00000080 0F22C0                           mov cr0,eax                        ;设置PE位
    53                                        
    54                                           ;以下进入保护模式... ...
    55 00000083 EA[8800]1000                     jmp 0x0010:flush                   ;16位的描述符选择子：32位偏移
    56                                                                              ;清流水线并串行化处理器
    57                                           [bits 32]               
    58                                    flush:                                  
    59 00000088 B808000000                       mov eax,0x0008                     ;加载数据段(0..4GB)选择子
    60 0000008D 8ED8                             mov ds,eax
    61                                        
    62 0000008F B818000000                       mov eax,0x0018                     ;加载堆栈段选择子 
    63 00000094 8ED0                             mov ss,eax
    64 00000096 31E4                             xor esp,esp                        ;堆栈指针 <- 0 
    65                                           
    66                                           ;以下加载系统核心程序 
    67 00000098 BF00000400                       mov edi,core_base_address 
    68                                        
    69 0000009D B801000000                       mov eax,core_start_sector
    70 000000A2 89FB                             mov ebx,edi                        ;起始地址 
    71 000000A4 E88D000000                       call read_hard_disk_0              ;以下读取程序的起始部分（一个扇区） 
    72                                  
    73                                           ;以下判断整个程序有多大
    74 000000A9 8B07                             mov eax,[edi]                      ;核心程序尺寸
    75 000000AB 31D2                             xor edx,edx 
    76 000000AD B900020000                       mov ecx,512                        ;512字节每扇区
    77 000000B2 F7F1                             div ecx
    78                                  
    79 000000B4 09D2                             or edx,edx
    80 000000B6 7501                             jnz @1                             ;未除尽，因此结果比实际扇区数少1 
    81 000000B8 48                               dec eax                            ;已经读了一个扇区，扇区总数减1 
    82                                     @1:
    83 000000B9 09C0                             or eax,eax                         ;考虑实际长度≤512个字节的情况 
    84 000000BB 7410                             jz setup                           ;EAX=0 ?
    85                                  
    86                                           ;读取剩余的扇区
    87 000000BD 89C1                             mov ecx,eax                        ;32位模式下的LOOP使用ECX
    88 000000BF B801000000                       mov eax,core_start_sector
    89 000000C4 40                               inc eax                            ;从下一个逻辑扇区接着读
    90                                     @2:
    91 000000C5 E86C000000                       call read_hard_disk_0
    92 000000CA 40                               inc eax
    93 000000CB E2F8                             loop @2                            ;循环读，直到读完整个内核 
    94                                  
    95                                   setup:
    96 000000CD 8B35[987D0000]                   mov esi,[0x7c00+pgdt+0x02]         ;不可以在代码段内寻址pgdt，但可以
    97                                                                              ;通过4GB的段来访问
    98                                           ;建立公用例程段描述符
    99 000000D3 8B4704                           mov eax,[edi+0x04]                 ;公用例程代码段起始汇编地址
   100 000000D6 8B5F08                           mov ebx,[edi+0x08]                 ;核心数据段汇编地址
   101 000000D9 29C3                             sub ebx,eax
   102 000000DB 4B                               dec ebx                            ;公用例程段界限 
   103 000000DC 01F8                             add eax,edi                        ;公用例程段基地址
   104 000000DE B900984000                       mov ecx,0x00409800                 ;字节粒度的代码段描述符
   105 000000E3 E893000000                       call make_gdt_descriptor
   106 000000E8 894628                           mov [esi+0x28],eax
   107 000000EB 89562C                           mov [esi+0x2c],edx
   108                                         
   109                                           ;建立核心数据段描述符
   110 000000EE 8B4708                           mov eax,[edi+0x08]                 ;核心数据段起始汇编地址
   111 000000F1 8B5F0C                           mov ebx,[edi+0x0c]                 ;核心代码段汇编地址 
   112 000000F4 29C3                             sub ebx,eax
   113 000000F6 4B                               dec ebx                            ;核心数据段界限
   114 000000F7 01F8                             add eax,edi                        ;核心数据段基地址
   115 000000F9 B900924000                       mov ecx,0x00409200                 ;字节粒度的数据段描述符 
   116 000000FE E878000000                       call make_gdt_descriptor
   117 00000103 894630                           mov [esi+0x30],eax
   118 00000106 895634                           mov [esi+0x34],edx 
   119                                        
   120                                           ;建立核心代码段描述符
   121 00000109 8B470C                           mov eax,[edi+0x0c]                 ;核心代码段起始汇编地址
   122 0000010C 8B1F                             mov ebx,[edi+0x00]                 ;程序总长度
   123 0000010E 29C3                             sub ebx,eax
   124 00000110 4B                               dec ebx                            ;核心代码段界限
   125 00000111 01F8                             add eax,edi                        ;核心代码段基地址
   126 00000113 B900984000                       mov ecx,0x00409800                 ;字节粒度的代码段描述符
   127 00000118 E85E000000                       call make_gdt_descriptor
   128 0000011D 894638                           mov [esi+0x38],eax
   129 00000120 89563C                           mov [esi+0x3c],edx
   130                                  
   131 00000123 66C705[967D0000]3F-              mov word [0x7c00+pgdt],63          ;描述符表的界限
   131 0000012B 00                 
   132                                                                          
   133 0000012C 0F0115[967D0000]                 lgdt [0x7c00+pgdt]                  
   134                                  
   135 00000133 FF6F10                           jmp far [edi+0x10]
   136                                         
   137                                  ;-------------------------------------------------------------------------------
   138                                  read_hard_disk_0:                        ;从硬盘读取一个逻辑扇区
   139                                                                           ;EAX=逻辑扇区号
   140                                                                           ;DS:EBX=目标缓冲区地址
   141                                                                           ;返回：EBX=EBX+512 
   142 00000136 50                               push eax 
   143 00000137 51                               push ecx
   144 00000138 52                               push edx
   145                                        
   146 00000139 50                               push eax
   147                                           
   148 0000013A 66BAF201                         mov dx,0x1f2
   149 0000013E B001                             mov al,1
   150 00000140 EE                               out dx,al                       ;读取的扇区数
   151                                  
   152 00000141 6642                             inc dx                          ;0x1f3
   153 00000143 58                               pop eax
   154 00000144 EE                               out dx,al                       ;LBA地址7~0
   155                                  
   156 00000145 6642                             inc dx                          ;0x1f4
   157 00000147 B108                             mov cl,8
   158 00000149 D3E8                             shr eax,cl
   159 0000014B EE                               out dx,al                       ;LBA地址15~8
   160                                  
   161 0000014C 6642                             inc dx                          ;0x1f5
   162 0000014E D3E8                             shr eax,cl
   163 00000150 EE                               out dx,al                       ;LBA地址23~16
   164                                  
   165 00000151 6642                             inc dx                          ;0x1f6
   166 00000153 D3E8                             shr eax,cl
   167 00000155 0CE0                             or al,0xe0                      ;第一硬盘  LBA地址27~24
   168 00000157 EE                               out dx,al
   169                                  
   170 00000158 6642                             inc dx                          ;0x1f7
   171 0000015A B020                             mov al,0x20                     ;读命令
   172 0000015C EE                               out dx,al
   173                                  
   174                                    .waits:
   175 0000015D EC                               in al,dx
   176 0000015E 2488                             and al,0x88
   177 00000160 3C08                             cmp al,0x08
   178 00000162 75F9                             jnz .waits                      ;不忙，且硬盘已准备好数据传输 
   179                                  
   180 00000164 B900010000                       mov ecx,256                     ;总共要读取的字数
   181 00000169 66BAF001                         mov dx,0x1f0
   182                                    .readw:
   183 0000016D 66ED                             in ax,dx
   184 0000016F 668903                           mov [ebx],ax
   185 00000172 83C302                           add ebx,2
   186 00000175 E2F6                             loop .readw
   187                                  
   188 00000177 5A                               pop edx
   189 00000178 59                               pop ecx
   190 00000179 58                               pop eax
   191                                        
   192 0000017A C3                               ret
   193                                  
   194                                  ;-------------------------------------------------------------------------------
   195                                  make_gdt_descriptor:                     ;构造描述符
   196                                                                           ;输入：EAX=线性基地址
   197                                                                           ;      EBX=段界限
   198                                                                           ;      ECX=属性（各属性位都在原始
   199                                                                           ;      位置，其它没用到的位置0） 
   200                                                                           ;返回：EDX:EAX=完整的描述符
   201 0000017B 89C2                             mov edx,eax
   202 0000017D C1E010                           shl eax,16                     
   203 00000180 6609D8                           or ax,bx                        ;描述符前32位(EAX)构造完毕
   204                                        
   205 00000183 81E20000FFFF                     and edx,0xffff0000              ;清除基地址中无关的位
   206 00000189 C1C208                           rol edx,8
   207 0000018C 0FCA                             bswap edx                       ;装配基址的31~24和23~16  (80486+)
   208                                        
   209 0000018E 6631DB                           xor bx,bx
   210 00000191 09DA                             or edx,ebx                      ;装配段界限的高4位
   211                                        
   212 00000193 09CA                             or edx,ecx                      ;装配属性 
   213                                        
   214 00000195 C3                               ret
   215                                        
   216                                  ;-------------------------------------------------------------------------------
   217 00000196 0000                             pgdt             dw 0
   218 00000198 007E0000                                          dd 0x00007e00      ;GDT的物理地址
   219                                  ;-------------------------------------------------------------------------------                             
   220 0000019C 00<rep 62h>                      times 510-($-$$) db 0
   221 000001FE 55AA                                              db 0x55,0xaa
